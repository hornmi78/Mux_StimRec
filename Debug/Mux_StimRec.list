
Mux_StimRec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f0  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08004480  08004480  00005480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004898  08004898  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004898  08004898  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004898  08004898  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004898  08004898  00005898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800489c  0800489c  0000589c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080048a0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  2000000c  080048ac  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  080048ac  0000622c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dac3  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002154  00000000  00000000  00013aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00015c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b93  00000000  00000000  00016b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000206e7  00000000  00000000  000176e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f909  00000000  00000000  00037dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6f33  00000000  00000000  000476d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e606  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040fc  00000000  00000000  0010e64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00112748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004468 	.word	0x08004468

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08004468 	.word	0x08004468

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <makeFrame>:
static uint8_t  txBuf[3];
static uint32_t lutIndex = 0;

/* ---------- helpers ------------------------------------------------------- */
static inline uint32_t makeFrame(uint8_t cmd, uint8_t addr, uint16_t data)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
 8000a16:	460b      	mov	r3, r1
 8000a18:	71bb      	strb	r3, [r7, #6]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	80bb      	strh	r3, [r7, #4]
    /* C[2:0] A[2:0] D[11:0] … left-aligned to DB23..0               */
    return ((cmd  & 0x07u) << 19) |
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	04db      	lsls	r3, r3, #19
 8000a22:	f403 1260 	and.w	r2, r3, #3670016	@ 0x380000
           ((addr & 0x07u) << 16) |
 8000a26:	79bb      	ldrb	r3, [r7, #6]
 8000a28:	041b      	lsls	r3, r3, #16
 8000a2a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    return ((cmd  & 0x07u) << 19) |
 8000a2e:	431a      	orrs	r2, r3
           ((data & 0x0FFFu) << 4);
 8000a30:	88bb      	ldrh	r3, [r7, #4]
 8000a32:	011b      	lsls	r3, r3, #4
 8000a34:	b29b      	uxth	r3, r3
           ((addr & 0x07u) << 16) |
 8000a36:	4313      	orrs	r3, r2
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <HAL_TIM_PeriodElapsedCallback>:

/* ------------------------------------------------------------------------- */
/*  TIM6 interrupt – one sample                                              */
/* ------------------------------------------------------------------------- */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
    if (htim->Instance != TIM6) return;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a2a      	ldr	r2, [pc, #168]	@ (8000afc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d14c      	bne.n	8000af0 <HAL_TIM_PeriodElapsedCallback+0xac>

    /* skip if previous 3-byte DMA still shifting */
    if (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 8000a56:	482a      	ldr	r0, [pc, #168]	@ (8000b00 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000a58:	f002 fab8 	bl	8002fcc <HAL_SPI_GetState>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d148      	bne.n	8000af4 <HAL_TIM_PeriodElapsedCallback+0xb0>
        return;

    /* scale unity sine to user amplitude */
    float frac = (sineLUT[lutIndex] / DAC_FS) *
 8000a62:	4b28      	ldr	r3, [pc, #160]	@ (8000b04 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a28      	ldr	r2, [pc, #160]	@ (8000b08 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a6c:	ee07 3a90 	vmov	s15, r3
 8000a70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a74:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8000b0c <HAL_TIM_PeriodElapsedCallback+0xc8>
 8000a78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a7c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8000b10 <HAL_TIM_PeriodElapsedCallback+0xcc>
 8000a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a84:	edc7 7a05 	vstr	s15, [r7, #20]
                 (USER_WAVE_AMP_V / (2*VREF));
    uint16_t code = (uint16_t)lroundf(frac * DAC_FS);
 8000a88:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a8c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000b0c <HAL_TIM_PeriodElapsedCallback+0xc8>
 8000a90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a94:	eeb0 0a67 	vmov.f32	s0, s15
 8000a98:	f002 ffce 	bl	8003a38 <lroundf>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	827b      	strh	r3, [r7, #18]

    uint32_t frame = makeFrame(0x3, 0, code);   /* write & update ch-A */
 8000aa0:	8a7b      	ldrh	r3, [r7, #18]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2003      	movs	r0, #3
 8000aa8:	f7ff ffb0 	bl	8000a0c <makeFrame>
 8000aac:	60f8      	str	r0, [r7, #12]

    txBuf[0] = frame >> 16;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	0c1b      	lsrs	r3, r3, #16
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000ab6:	701a      	strb	r2, [r3, #0]
    txBuf[1] = frame >> 8;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	0a1b      	lsrs	r3, r3, #8
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000ac0:	705a      	strb	r2, [r3, #1]
    txBuf[2] = frame;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000ac8:	709a      	strb	r2, [r3, #2]

    HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET); /* SYNC ↓ */
 8000aca:	2200      	movs	r2, #0
 8000acc:	2110      	movs	r1, #16
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad2:	f001 f8a1 	bl	8001c18 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi1, txBuf, 3);                              /* 3 bytes */
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	490e      	ldr	r1, [pc, #56]	@ (8000b14 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000ada:	4809      	ldr	r0, [pc, #36]	@ (8000b00 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000adc:	f002 f974 	bl	8002dc8 <HAL_SPI_Transmit_DMA>

    lutIndex = (lutIndex + 1U) & (LUT_SIZE - 1U);
 8000ae0:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000aea:	4a06      	ldr	r2, [pc, #24]	@ (8000b04 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	e002      	b.n	8000af6 <HAL_TIM_PeriodElapsedCallback+0xb2>
    if (htim->Instance != TIM6) return;
 8000af0:	bf00      	nop
 8000af2:	e000      	b.n	8000af6 <HAL_TIM_PeriodElapsedCallback+0xb2>
        return;
 8000af4:	bf00      	nop
}
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40001000 	.word	0x40001000
 8000b00:	20000028 	.word	0x20000028
 8000b04:	20000224 	.word	0x20000224
 8000b08:	20000120 	.word	0x20000120
 8000b0c:	457ff000 	.word	0x457ff000
 8000b10:	3f15182a 	.word	0x3f15182a
 8000b14:	20000220 	.word	0x20000220

08000b18 <HAL_SPI_TxCpltCallback>:

/* SPI-DMA complete → SYNC ↑ */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2110      	movs	r1, #16
 8000b24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b28:	f001 f876 	bl	8001c18 <HAL_GPIO_WritePin>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <TIM6_SetSampleRate>:

/* ---------- timer helper -------------------------------------------------- */
static void TIM6_SetSampleRate(uint32_t pclk, float fout)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	ed87 0a00 	vstr	s0, [r7]
    float f_up   = fout * LUT_SIZE;
 8000b40:	edd7 7a00 	vldr	s15, [r7]
 8000b44:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8000bec <TIM6_SetSampleRate+0xb8>
 8000b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b4c:	edc7 7a04 	vstr	s15, [r7, #16]
    uint32_t tck = (uint32_t)lroundf(pclk / f_up);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	ee07 3a90 	vmov	s15, r3
 8000b56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b5e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000b62:	eeb0 0a66 	vmov.f32	s0, s13
 8000b66:	f002 ff67 	bl	8003a38 <lroundf>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	617b      	str	r3, [r7, #20]
    if (tck < 2) tck = 2;
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d801      	bhi.n	8000b78 <TIM6_SetSampleRate+0x44>
 8000b74:	2302      	movs	r3, #2
 8000b76:	617b      	str	r3, [r7, #20]

    uint32_t psc = (tck - 1U) / 65536U;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	0c1b      	lsrs	r3, r3, #16
 8000b7e:	60fb      	str	r3, [r7, #12]
    uint32_t arr = (tck / (psc + 1U)) - 1U;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	3301      	adds	r3, #1
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	60bb      	str	r3, [r7, #8]

    __HAL_TIM_DISABLE(&htim6);
 8000b8e:	4b18      	ldr	r3, [pc, #96]	@ (8000bf0 <TIM6_SetSampleRate+0xbc>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	6a1a      	ldr	r2, [r3, #32]
 8000b94:	f241 1311 	movw	r3, #4369	@ 0x1111
 8000b98:	4013      	ands	r3, r2
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10f      	bne.n	8000bbe <TIM6_SetSampleRate+0x8a>
 8000b9e:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <TIM6_SetSampleRate+0xbc>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6a1a      	ldr	r2, [r3, #32]
 8000ba4:	f240 4344 	movw	r3, #1092	@ 0x444
 8000ba8:	4013      	ands	r3, r2
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d107      	bne.n	8000bbe <TIM6_SetSampleRate+0x8a>
 8000bae:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <TIM6_SetSampleRate+0xbc>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <TIM6_SetSampleRate+0xbc>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f022 0201 	bic.w	r2, r2, #1
 8000bbc:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_PRESCALER(&htim6,  psc);
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <TIM6_SetSampleRate+0xbc>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(&htim6, arr);
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <TIM6_SetSampleRate+0xbc>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bce:	4a08      	ldr	r2, [pc, #32]	@ (8000bf0 <TIM6_SetSampleRate+0xbc>)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_ENABLE(&htim6);
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <TIM6_SetSampleRate+0xbc>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	4b05      	ldr	r3, [pc, #20]	@ (8000bf0 <TIM6_SetSampleRate+0xbc>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f042 0201 	orr.w	r2, r2, #1
 8000be2:	601a      	str	r2, [r3, #0]
}
 8000be4:	bf00      	nop
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	43000000 	.word	0x43000000
 8000bf0:	200000d4 	.word	0x200000d4
 8000bf4:	00000000 	.word	0x00000000

08000bf8 <App_Init>:

/* ---------- app init ------------------------------------------------------ */
static void App_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
    /* build unity LUT */
    for (uint32_t i = 0; i < LUT_SIZE; ++i)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	e036      	b.n	8000c72 <App_Init+0x7a>
        sineLUT[i] = (uint16_t)lroundf(
                        (sinf(2.0f*M_PI*i/LUT_SIZE)*0.5f + 0.5f) * DAC_FS);
 8000c04:	68f8      	ldr	r0, [r7, #12]
 8000c06:	f7ff fc25 	bl	8000454 <__aeabi_ui2d>
 8000c0a:	a337      	add	r3, pc, #220	@ (adr r3, 8000ce8 <App_Init+0xf0>)
 8000c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c10:	f7ff fc9a 	bl	8000548 <__aeabi_dmul>
 8000c14:	4602      	mov	r2, r0
 8000c16:	460b      	mov	r3, r1
 8000c18:	4610      	mov	r0, r2
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f04f 0200 	mov.w	r2, #0
 8000c20:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd8 <App_Init+0xe0>)
 8000c22:	f7ff fdbb 	bl	800079c <__aeabi_ddiv>
 8000c26:	4602      	mov	r2, r0
 8000c28:	460b      	mov	r3, r1
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f7ff fe9d 	bl	800096c <__aeabi_d2f>
 8000c32:	4603      	mov	r3, r0
 8000c34:	ee00 3a10 	vmov	s0, r3
 8000c38:	f002 feb8 	bl	80039ac <sinf>
 8000c3c:	eef0 7a40 	vmov.f32	s15, s0
 8000c40:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c48:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000c4c:	ee77 7a87 	vadd.f32	s15, s15, s14
        sineLUT[i] = (uint16_t)lroundf(
 8000c50:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8000cdc <App_Init+0xe4>
 8000c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c58:	eeb0 0a67 	vmov.f32	s0, s15
 8000c5c:	f002 feec 	bl	8003a38 <lroundf>
 8000c60:	4603      	mov	r3, r0
 8000c62:	b299      	uxth	r1, r3
 8000c64:	4a1e      	ldr	r2, [pc, #120]	@ (8000ce0 <App_Init+0xe8>)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint32_t i = 0; i < LUT_SIZE; ++i)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c76:	d9c5      	bls.n	8000c04 <App_Init+0xc>

    /* enable internal reference */
    uint32_t ref = makeFrame(0x7, 0, 0x0001);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2007      	movs	r0, #7
 8000c7e:	f7ff fec5 	bl	8000a0c <makeFrame>
 8000c82:	60b8      	str	r0, [r7, #8]
    uint8_t tmp[3] = {ref>>16, ref>>8, ref};
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	0c1b      	lsrs	r3, r3, #16
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	713b      	strb	r3, [r7, #4]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	0a1b      	lsrs	r3, r3, #8
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	717b      	strb	r3, [r7, #5]
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port,DAC_SYNC_Pin,GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2110      	movs	r1, #16
 8000c9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca2:	f000 ffb9 	bl	8001c18 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, tmp, 3, HAL_MAX_DELAY);
 8000ca6:	1d39      	adds	r1, r7, #4
 8000ca8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cac:	2203      	movs	r2, #3
 8000cae:	480d      	ldr	r0, [pc, #52]	@ (8000ce4 <App_Init+0xec>)
 8000cb0:	f001 ff13 	bl	8002ada <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port,DAC_SYNC_Pin,GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2110      	movs	r1, #16
 8000cb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cbc:	f000 ffac 	bl	8001c18 <HAL_GPIO_WritePin>

    /* set sample-timer */
    TIM6_SetSampleRate(HAL_RCC_GetPCLK1Freq(), USER_WAVE_FREQ_HZ);
 8000cc0:	f001 fde2 	bl	8002888 <HAL_RCC_GetPCLK1Freq>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff32 	bl	8000b34 <TIM6_SetSampleRate>
}
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40600000 	.word	0x40600000
 8000cdc:	457ff000 	.word	0x457ff000
 8000ce0:	20000120 	.word	0x20000120
 8000ce4:	20000028 	.word	0x20000028
 8000ce8:	54442d18 	.word	0x54442d18
 8000cec:	401921fb 	.word	0x401921fb

08000cf0 <main>:
static void MX_DMA_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM6_Init(void);

int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
    HAL_Init();
 8000cf4:	f000 faa7 	bl	8001246 <HAL_Init>
    SystemClock_Config();
 8000cf8:	f000 f812 	bl	8000d20 <SystemClock_Config>
    MX_GPIO_Init();
 8000cfc:	f000 f904 	bl	8000f08 <MX_GPIO_Init>
    MX_DMA_Init();
 8000d00:	f000 f8e4 	bl	8000ecc <MX_DMA_Init>
    MX_SPI1_Init();
 8000d04:	f000 f86e 	bl	8000de4 <MX_SPI1_Init>
    MX_TIM6_Init();
 8000d08:	f000 f8aa 	bl	8000e60 <MX_TIM6_Init>

    App_Init();
 8000d0c:	f7ff ff74 	bl	8000bf8 <App_Init>

    HAL_TIM_Base_Start_IT(&htim6);   /* start the waveform engine */
 8000d10:	4802      	ldr	r0, [pc, #8]	@ (8000d1c <main+0x2c>)
 8000d12:	f002 fba7 	bl	8003464 <HAL_TIM_Base_Start_IT>

    while (1) {
    	__WFI();   				/* CPU sleeps */
 8000d16:	bf30      	wfi
 8000d18:	e7fd      	b.n	8000d16 <main+0x26>
 8000d1a:	bf00      	nop
 8000d1c:	200000d4 	.word	0x200000d4

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b096      	sub	sp, #88	@ 0x58
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	2244      	movs	r2, #68	@ 0x44
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 fe10 	bl	8003954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	463b      	mov	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d42:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d46:	f000 ff9d 	bl	8001c84 <HAL_PWREx_ControlVoltageScaling>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d50:	f000 f93a 	bl	8000fc8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d54:	f000 ff78 	bl	8001c48 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d58:	4b21      	ldr	r3, [pc, #132]	@ (8000de0 <SystemClock_Config+0xc0>)
 8000d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d5e:	4a20      	ldr	r2, [pc, #128]	@ (8000de0 <SystemClock_Config+0xc0>)
 8000d60:	f023 0318 	bic.w	r3, r3, #24
 8000d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000d68:	2314      	movs	r3, #20
 8000d6a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d70:	2301      	movs	r3, #1
 8000d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d78:	2360      	movs	r3, #96	@ 0x60
 8000d7a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d80:	2301      	movs	r3, #1
 8000d82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000d88:	2328      	movs	r3, #40	@ 0x28
 8000d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d90:	2302      	movs	r3, #2
 8000d92:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 ffc7 	bl	8001d30 <HAL_RCC_OscConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000da8:	f000 f90e 	bl	8000fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dac:	230f      	movs	r3, #15
 8000dae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db0:	2303      	movs	r3, #3
 8000db2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	2104      	movs	r1, #4
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f001 fbc7 	bl	8002558 <HAL_RCC_ClockConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000dd0:	f000 f8fa 	bl	8000fc8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000dd4:	f001 fdce 	bl	8002974 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000dd8:	bf00      	nop
 8000dda:	3758      	adds	r7, #88	@ 0x58
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40021000 	.word	0x40021000

08000de4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e58 <MX_SPI1_Init+0x74>)
 8000dea:	4a1c      	ldr	r2, [pc, #112]	@ (8000e5c <MX_SPI1_Init+0x78>)
 8000dec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	@ (8000e58 <MX_SPI1_Init+0x74>)
 8000df0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000df4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000df6:	4b18      	ldr	r3, [pc, #96]	@ (8000e58 <MX_SPI1_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dfc:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <MX_SPI1_Init+0x74>)
 8000dfe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000e02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e04:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <MX_SPI1_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <MX_SPI1_Init+0x74>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e10:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_SPI1_Init+0x74>)
 8000e12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <MX_SPI1_Init+0x74>)
 8000e1a:	2218      	movs	r2, #24
 8000e1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <MX_SPI1_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <MX_SPI1_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e58 <MX_SPI1_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e30:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <MX_SPI1_Init+0x74>)
 8000e32:	2207      	movs	r2, #7
 8000e34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e36:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <MX_SPI1_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <MX_SPI1_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e42:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <MX_SPI1_Init+0x74>)
 8000e44:	f001 fda6 	bl	8002994 <HAL_SPI_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f000 f8bb 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000028 	.word	0x20000028
 8000e5c:	40013000 	.word	0x40013000

08000e60 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <MX_TIM6_Init+0x64>)
 8000e72:	4a15      	ldr	r2, [pc, #84]	@ (8000ec8 <MX_TIM6_Init+0x68>)
 8000e74:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000e76:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <MX_TIM6_Init+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <MX_TIM6_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000e82:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <MX_TIM6_Init+0x64>)
 8000e84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e88:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <MX_TIM6_Init+0x64>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e90:	480c      	ldr	r0, [pc, #48]	@ (8000ec4 <MX_TIM6_Init+0x64>)
 8000e92:	f002 fa8f 	bl	80033b4 <HAL_TIM_Base_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000e9c:	f000 f894 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <MX_TIM6_Init+0x64>)
 8000eae:	f002 fccd 	bl	800384c <HAL_TIMEx_MasterConfigSynchronization>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000eb8:	f000 f886 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200000d4 	.word	0x200000d4
 8000ec8:	40001000 	.word	0x40001000

08000ecc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <MX_DMA_Init+0x38>)
 8000ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	@ (8000f04 <MX_DMA_Init+0x38>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ede:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <MX_DMA_Init+0x38>)
 8000ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	200d      	movs	r0, #13
 8000ef0:	f000 faf9 	bl	80014e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000ef4:	200d      	movs	r0, #13
 8000ef6:	f000 fb12 	bl	800151e <HAL_NVIC_EnableIRQ>

}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000

08000f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	4b28      	ldr	r3, [pc, #160]	@ (8000fc0 <MX_GPIO_Init+0xb8>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	4a27      	ldr	r2, [pc, #156]	@ (8000fc0 <MX_GPIO_Init+0xb8>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f2a:	4b25      	ldr	r3, [pc, #148]	@ (8000fc0 <MX_GPIO_Init+0xb8>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4b22      	ldr	r3, [pc, #136]	@ (8000fc0 <MX_GPIO_Init+0xb8>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3a:	4a21      	ldr	r2, [pc, #132]	@ (8000fc0 <MX_GPIO_Init+0xb8>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f42:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc0 <MX_GPIO_Init+0xb8>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc0 <MX_GPIO_Init+0xb8>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc0 <MX_GPIO_Init+0xb8>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5a:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <MX_GPIO_Init+0xb8>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2110      	movs	r1, #16
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6e:	f000 fe53 	bl	8001c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2108      	movs	r1, #8
 8000f76:	4813      	ldr	r0, [pc, #76]	@ (8000fc4 <MX_GPIO_Init+0xbc>)
 8000f78:	f000 fe4e 	bl	8001c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	4619      	mov	r1, r3
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f96:	f000 fcd5 	bl	8001944 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <MX_GPIO_Init+0xbc>)
 8000fb2:	f000 fcc7 	bl	8001944 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fb6:	bf00      	nop
 8000fb8:	3720      	adds	r7, #32
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	48000400 	.word	0x48000400

08000fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fcc:	b672      	cpsid	i
}
 8000fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <Error_Handler+0x8>

08000fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <HAL_MspInit+0x44>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fde:	4a0e      	ldr	r2, [pc, #56]	@ (8001018 <HAL_MspInit+0x44>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <HAL_MspInit+0x44>)
 8000fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <HAL_MspInit+0x44>)
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff6:	4a08      	ldr	r2, [pc, #32]	@ (8001018 <HAL_MspInit+0x44>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ffc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ffe:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <HAL_MspInit+0x44>)
 8001000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000

0800101c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	@ 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a2c      	ldr	r2, [pc, #176]	@ (80010ec <HAL_SPI_MspInit+0xd0>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d151      	bne.n	80010e2 <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800103e:	4b2c      	ldr	r3, [pc, #176]	@ (80010f0 <HAL_SPI_MspInit+0xd4>)
 8001040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001042:	4a2b      	ldr	r2, [pc, #172]	@ (80010f0 <HAL_SPI_MspInit+0xd4>)
 8001044:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001048:	6613      	str	r3, [r2, #96]	@ 0x60
 800104a:	4b29      	ldr	r3, [pc, #164]	@ (80010f0 <HAL_SPI_MspInit+0xd4>)
 800104c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800104e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b26      	ldr	r3, [pc, #152]	@ (80010f0 <HAL_SPI_MspInit+0xd4>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105a:	4a25      	ldr	r2, [pc, #148]	@ (80010f0 <HAL_SPI_MspInit+0xd4>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001062:	4b23      	ldr	r3, [pc, #140]	@ (80010f0 <HAL_SPI_MspInit+0xd4>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800106e:	23a0      	movs	r3, #160	@ 0xa0
 8001070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800107e:	2305      	movs	r3, #5
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800108c:	f000 fc5a 	bl	8001944 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001090:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <HAL_SPI_MspInit+0xd8>)
 8001092:	4a19      	ldr	r2, [pc, #100]	@ (80010f8 <HAL_SPI_MspInit+0xdc>)
 8001094:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001096:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <HAL_SPI_MspInit+0xd8>)
 8001098:	2201      	movs	r2, #1
 800109a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800109c:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <HAL_SPI_MspInit+0xd8>)
 800109e:	2210      	movs	r2, #16
 80010a0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a2:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <HAL_SPI_MspInit+0xd8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <HAL_SPI_MspInit+0xd8>)
 80010aa:	2280      	movs	r2, #128	@ 0x80
 80010ac:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010ae:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <HAL_SPI_MspInit+0xd8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <HAL_SPI_MspInit+0xd8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <HAL_SPI_MspInit+0xd8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <HAL_SPI_MspInit+0xd8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80010c6:	480b      	ldr	r0, [pc, #44]	@ (80010f4 <HAL_SPI_MspInit+0xd8>)
 80010c8:	f000 fa44 	bl	8001554 <HAL_DMA_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80010d2:	f7ff ff79 	bl	8000fc8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a06      	ldr	r2, [pc, #24]	@ (80010f4 <HAL_SPI_MspInit+0xd8>)
 80010da:	655a      	str	r2, [r3, #84]	@ 0x54
 80010dc:	4a05      	ldr	r2, [pc, #20]	@ (80010f4 <HAL_SPI_MspInit+0xd8>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	@ 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40013000 	.word	0x40013000
 80010f0:	40021000 	.word	0x40021000
 80010f4:	2000008c 	.word	0x2000008c
 80010f8:	40020030 	.word	0x40020030

080010fc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a0d      	ldr	r2, [pc, #52]	@ (8001140 <HAL_TIM_Base_MspInit+0x44>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d113      	bne.n	8001136 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800110e:	4b0d      	ldr	r3, [pc, #52]	@ (8001144 <HAL_TIM_Base_MspInit+0x48>)
 8001110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001112:	4a0c      	ldr	r2, [pc, #48]	@ (8001144 <HAL_TIM_Base_MspInit+0x48>)
 8001114:	f043 0310 	orr.w	r3, r3, #16
 8001118:	6593      	str	r3, [r2, #88]	@ 0x58
 800111a:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <HAL_TIM_Base_MspInit+0x48>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	2036      	movs	r0, #54	@ 0x36
 800112c:	f000 f9db 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001130:	2036      	movs	r0, #54	@ 0x36
 8001132:	f000 f9f4 	bl	800151e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40001000 	.word	0x40001000
 8001144:	40021000 	.word	0x40021000

08001148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <NMI_Handler+0x4>

08001150 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <HardFault_Handler+0x4>

08001158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <MemManage_Handler+0x4>

08001160 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <BusFault_Handler+0x4>

08001168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <UsageFault_Handler+0x4>

08001170 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119e:	f000 f8a7 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <DMA1_Channel3_IRQHandler+0x10>)
 80011ae:	f000 fae9 	bl	8001784 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000008c 	.word	0x2000008c

080011bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011c0:	4802      	ldr	r0, [pc, #8]	@ (80011cc <TIM6_DAC_IRQHandler+0x10>)
 80011c2:	f002 f9a3 	bl	800350c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200000d4 	.word	0x200000d4

080011d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <SystemInit+0x20>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011da:	4a05      	ldr	r2, [pc, #20]	@ (80011f0 <SystemInit+0x20>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800122c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f8:	f7ff ffea 	bl	80011d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011fc:	480c      	ldr	r0, [pc, #48]	@ (8001230 <LoopForever+0x6>)
  ldr r1, =_edata
 80011fe:	490d      	ldr	r1, [pc, #52]	@ (8001234 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001200:	4a0d      	ldr	r2, [pc, #52]	@ (8001238 <LoopForever+0xe>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001204:	e002      	b.n	800120c <LoopCopyDataInit>

08001206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120a:	3304      	adds	r3, #4

0800120c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800120c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001210:	d3f9      	bcc.n	8001206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001212:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001214:	4c0a      	ldr	r4, [pc, #40]	@ (8001240 <LoopForever+0x16>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001218:	e001      	b.n	800121e <LoopFillZerobss>

0800121a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800121c:	3204      	adds	r2, #4

0800121e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001220:	d3fb      	bcc.n	800121a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001222:	f002 fb9f 	bl	8003964 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001226:	f7ff fd63 	bl	8000cf0 <main>

0800122a <LoopForever>:

LoopForever:
    b LoopForever
 800122a:	e7fe      	b.n	800122a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800122c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001234:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001238:	080048a0 	.word	0x080048a0
  ldr r2, =_sbss
 800123c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001240:	2000022c 	.word	0x2000022c

08001244 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC1_IRQHandler>

08001246 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f93d 	bl	80014d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001256:	2000      	movs	r0, #0
 8001258:	f000 f80e 	bl	8001278 <HAL_InitTick>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d002      	beq.n	8001268 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	e001      	b.n	800126c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001268:	f7ff feb4 	bl	8000fd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800126c:	79fb      	ldrb	r3, [r7, #7]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001284:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <HAL_InitTick+0x6c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d023      	beq.n	80012d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800128c:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <HAL_InitTick+0x70>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <HAL_InitTick+0x6c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800129a:	fbb3 f3f1 	udiv	r3, r3, r1
 800129e:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f949 	bl	800153a <HAL_SYSTICK_Config>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10f      	bne.n	80012ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b0f      	cmp	r3, #15
 80012b2:	d809      	bhi.n	80012c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b4:	2200      	movs	r2, #0
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012bc:	f000 f913 	bl	80014e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c0:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <HAL_InitTick+0x74>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e007      	b.n	80012d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	73fb      	strb	r3, [r7, #15]
 80012cc:	e004      	b.n	80012d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	73fb      	strb	r3, [r7, #15]
 80012d2:	e001      	b.n	80012d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000008 	.word	0x20000008
 80012e8:	20000000 	.word	0x20000000
 80012ec:	20000004 	.word	0x20000004

080012f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <HAL_IncTick+0x20>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_IncTick+0x24>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a04      	ldr	r2, [pc, #16]	@ (8001314 <HAL_IncTick+0x24>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000008 	.word	0x20000008
 8001314:	20000228 	.word	0x20000228

08001318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b03      	ldr	r3, [pc, #12]	@ (800132c <HAL_GetTick+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000228 	.word	0x20000228

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001358:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800135c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001362:	4a04      	ldr	r2, [pc, #16]	@ (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	60d3      	str	r3, [r2, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db0b      	blt.n	80013be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	f003 021f 	and.w	r2, r3, #31
 80013ac:	4907      	ldr	r1, [pc, #28]	@ (80013cc <__NVIC_EnableIRQ+0x38>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	2001      	movs	r0, #1
 80013b6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000e100 	.word	0xe000e100

080013d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	db0a      	blt.n	80013fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	490c      	ldr	r1, [pc, #48]	@ (800141c <__NVIC_SetPriority+0x4c>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	0112      	lsls	r2, r2, #4
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	440b      	add	r3, r1
 80013f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f8:	e00a      	b.n	8001410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4908      	ldr	r1, [pc, #32]	@ (8001420 <__NVIC_SetPriority+0x50>)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	3b04      	subs	r3, #4
 8001408:	0112      	lsls	r2, r2, #4
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	440b      	add	r3, r1
 800140e:	761a      	strb	r2, [r3, #24]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000e100 	.word	0xe000e100
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001424:	b480      	push	{r7}
 8001426:	b089      	sub	sp, #36	@ 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f1c3 0307 	rsb	r3, r3, #7
 800143e:	2b04      	cmp	r3, #4
 8001440:	bf28      	it	cs
 8001442:	2304      	movcs	r3, #4
 8001444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3304      	adds	r3, #4
 800144a:	2b06      	cmp	r3, #6
 800144c:	d902      	bls.n	8001454 <NVIC_EncodePriority+0x30>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3b03      	subs	r3, #3
 8001452:	e000      	b.n	8001456 <NVIC_EncodePriority+0x32>
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43da      	mvns	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	401a      	ands	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800146c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43d9      	mvns	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	4313      	orrs	r3, r2
         );
}
 800147e:	4618      	mov	r0, r3
 8001480:	3724      	adds	r7, #36	@ 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800149c:	d301      	bcc.n	80014a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149e:	2301      	movs	r3, #1
 80014a0:	e00f      	b.n	80014c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a2:	4a0a      	ldr	r2, [pc, #40]	@ (80014cc <SysTick_Config+0x40>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014aa:	210f      	movs	r1, #15
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014b0:	f7ff ff8e 	bl	80013d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b4:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <SysTick_Config+0x40>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ba:	4b04      	ldr	r3, [pc, #16]	@ (80014cc <SysTick_Config+0x40>)
 80014bc:	2207      	movs	r2, #7
 80014be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	e000e010 	.word	0xe000e010

080014d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff29 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014f8:	f7ff ff3e 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	6978      	ldr	r0, [r7, #20]
 8001504:	f7ff ff8e 	bl	8001424 <NVIC_EncodePriority>
 8001508:	4602      	mov	r2, r0
 800150a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff5d 	bl	80013d0 <__NVIC_SetPriority>
}
 8001516:	bf00      	nop
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff31 	bl	8001394 <__NVIC_EnableIRQ>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff ffa2 	bl	800148c <SysTick_Config>
 8001548:	4603      	mov	r3, r0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e098      	b.n	8001698 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	4b4d      	ldr	r3, [pc, #308]	@ (80016a4 <HAL_DMA_Init+0x150>)
 800156e:	429a      	cmp	r2, r3
 8001570:	d80f      	bhi.n	8001592 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	4b4b      	ldr	r3, [pc, #300]	@ (80016a8 <HAL_DMA_Init+0x154>)
 800157a:	4413      	add	r3, r2
 800157c:	4a4b      	ldr	r2, [pc, #300]	@ (80016ac <HAL_DMA_Init+0x158>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	091b      	lsrs	r3, r3, #4
 8001584:	009a      	lsls	r2, r3, #2
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a48      	ldr	r2, [pc, #288]	@ (80016b0 <HAL_DMA_Init+0x15c>)
 800158e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001590:	e00e      	b.n	80015b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	4b46      	ldr	r3, [pc, #280]	@ (80016b4 <HAL_DMA_Init+0x160>)
 800159a:	4413      	add	r3, r2
 800159c:	4a43      	ldr	r2, [pc, #268]	@ (80016ac <HAL_DMA_Init+0x158>)
 800159e:	fba2 2303 	umull	r2, r3, r2, r3
 80015a2:	091b      	lsrs	r3, r3, #4
 80015a4:	009a      	lsls	r2, r3, #2
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a42      	ldr	r2, [pc, #264]	@ (80016b8 <HAL_DMA_Init+0x164>)
 80015ae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2202      	movs	r2, #2
 80015b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80015c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80015ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80015d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800160a:	d039      	beq.n	8001680 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001610:	4a27      	ldr	r2, [pc, #156]	@ (80016b0 <HAL_DMA_Init+0x15c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d11a      	bne.n	800164c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001616:	4b29      	ldr	r3, [pc, #164]	@ (80016bc <HAL_DMA_Init+0x168>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161e:	f003 031c 	and.w	r3, r3, #28
 8001622:	210f      	movs	r1, #15
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	4924      	ldr	r1, [pc, #144]	@ (80016bc <HAL_DMA_Init+0x168>)
 800162c:	4013      	ands	r3, r2
 800162e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001630:	4b22      	ldr	r3, [pc, #136]	@ (80016bc <HAL_DMA_Init+0x168>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6859      	ldr	r1, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163c:	f003 031c 	and.w	r3, r3, #28
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	491d      	ldr	r1, [pc, #116]	@ (80016bc <HAL_DMA_Init+0x168>)
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]
 800164a:	e019      	b.n	8001680 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800164c:	4b1c      	ldr	r3, [pc, #112]	@ (80016c0 <HAL_DMA_Init+0x16c>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001654:	f003 031c 	and.w	r3, r3, #28
 8001658:	210f      	movs	r1, #15
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	4917      	ldr	r1, [pc, #92]	@ (80016c0 <HAL_DMA_Init+0x16c>)
 8001662:	4013      	ands	r3, r2
 8001664:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001666:	4b16      	ldr	r3, [pc, #88]	@ (80016c0 <HAL_DMA_Init+0x16c>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6859      	ldr	r1, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001672:	f003 031c 	and.w	r3, r3, #28
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	4911      	ldr	r1, [pc, #68]	@ (80016c0 <HAL_DMA_Init+0x16c>)
 800167c:	4313      	orrs	r3, r2
 800167e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	40020407 	.word	0x40020407
 80016a8:	bffdfff8 	.word	0xbffdfff8
 80016ac:	cccccccd 	.word	0xcccccccd
 80016b0:	40020000 	.word	0x40020000
 80016b4:	bffdfbf8 	.word	0xbffdfbf8
 80016b8:	40020400 	.word	0x40020400
 80016bc:	400200a8 	.word	0x400200a8
 80016c0:	400204a8 	.word	0x400204a8

080016c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d101      	bne.n	80016e4 <HAL_DMA_Start_IT+0x20>
 80016e0:	2302      	movs	r3, #2
 80016e2:	e04b      	b.n	800177c <HAL_DMA_Start_IT+0xb8>
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d13a      	bne.n	800176e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2202      	movs	r2, #2
 80016fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0201 	bic.w	r2, r2, #1
 8001714:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	68b9      	ldr	r1, [r7, #8]
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f000 f8e0 	bl	80018e2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	2b00      	cmp	r3, #0
 8001728:	d008      	beq.n	800173c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 020e 	orr.w	r2, r2, #14
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e00f      	b.n	800175c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0204 	bic.w	r2, r2, #4
 800174a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 020a 	orr.w	r2, r2, #10
 800175a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	e005      	b.n	800177a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001776:	2302      	movs	r3, #2
 8001778:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800177a:	7dfb      	ldrb	r3, [r7, #23]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a0:	f003 031c 	and.w	r3, r3, #28
 80017a4:	2204      	movs	r2, #4
 80017a6:	409a      	lsls	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d026      	beq.n	80017fe <HAL_DMA_IRQHandler+0x7a>
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d021      	beq.n	80017fe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0320 	and.w	r3, r3, #32
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d107      	bne.n	80017d8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0204 	bic.w	r2, r2, #4
 80017d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017dc:	f003 021c 	and.w	r2, r3, #28
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e4:	2104      	movs	r1, #4
 80017e6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d071      	beq.n	80018d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80017fc:	e06c      	b.n	80018d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	f003 031c 	and.w	r3, r3, #28
 8001806:	2202      	movs	r2, #2
 8001808:	409a      	lsls	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4013      	ands	r3, r2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d02e      	beq.n	8001870 <HAL_DMA_IRQHandler+0xec>
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d029      	beq.n	8001870 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0320 	and.w	r3, r3, #32
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10b      	bne.n	8001842 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 020a 	bic.w	r2, r2, #10
 8001838:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	f003 021c 	and.w	r2, r3, #28
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	2102      	movs	r1, #2
 8001850:	fa01 f202 	lsl.w	r2, r1, r2
 8001854:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001862:	2b00      	cmp	r3, #0
 8001864:	d038      	beq.n	80018d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800186e:	e033      	b.n	80018d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001874:	f003 031c 	and.w	r3, r3, #28
 8001878:	2208      	movs	r2, #8
 800187a:	409a      	lsls	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4013      	ands	r3, r2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d02a      	beq.n	80018da <HAL_DMA_IRQHandler+0x156>
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d025      	beq.n	80018da <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 020e 	bic.w	r2, r2, #14
 800189c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	f003 021c 	and.w	r2, r3, #28
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	2101      	movs	r1, #1
 80018ac:	fa01 f202 	lsl.w	r2, r1, r2
 80018b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d004      	beq.n	80018da <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
}
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b085      	sub	sp, #20
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	60f8      	str	r0, [r7, #12]
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f4:	f003 021c 	and.w	r2, r3, #28
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fc:	2101      	movs	r1, #1
 80018fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001902:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b10      	cmp	r3, #16
 8001912:	d108      	bne.n	8001926 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001924:	e007      	b.n	8001936 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	60da      	str	r2, [r3, #12]
}
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001952:	e148      	b.n	8001be6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	2101      	movs	r1, #1
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 813a 	beq.w	8001be0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b01      	cmp	r3, #1
 8001976:	d005      	beq.n	8001984 <HAL_GPIO_Init+0x40>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d130      	bne.n	80019e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	2203      	movs	r2, #3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ba:	2201      	movs	r2, #1
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	091b      	lsrs	r3, r3, #4
 80019d0:	f003 0201 	and.w	r2, r3, #1
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d017      	beq.n	8001a22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	2203      	movs	r2, #3
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d123      	bne.n	8001a76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	08da      	lsrs	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3208      	adds	r2, #8
 8001a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	220f      	movs	r2, #15
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	691a      	ldr	r2, [r3, #16]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	08da      	lsrs	r2, r3, #3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3208      	adds	r2, #8
 8001a70:	6939      	ldr	r1, [r7, #16]
 8001a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	2203      	movs	r2, #3
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 0203 	and.w	r2, r3, #3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8094 	beq.w	8001be0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab8:	4b52      	ldr	r3, [pc, #328]	@ (8001c04 <HAL_GPIO_Init+0x2c0>)
 8001aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001abc:	4a51      	ldr	r2, [pc, #324]	@ (8001c04 <HAL_GPIO_Init+0x2c0>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ac4:	4b4f      	ldr	r3, [pc, #316]	@ (8001c04 <HAL_GPIO_Init+0x2c0>)
 8001ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ad0:	4a4d      	ldr	r2, [pc, #308]	@ (8001c08 <HAL_GPIO_Init+0x2c4>)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001afa:	d00d      	beq.n	8001b18 <HAL_GPIO_Init+0x1d4>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a43      	ldr	r2, [pc, #268]	@ (8001c0c <HAL_GPIO_Init+0x2c8>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d007      	beq.n	8001b14 <HAL_GPIO_Init+0x1d0>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a42      	ldr	r2, [pc, #264]	@ (8001c10 <HAL_GPIO_Init+0x2cc>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d101      	bne.n	8001b10 <HAL_GPIO_Init+0x1cc>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e004      	b.n	8001b1a <HAL_GPIO_Init+0x1d6>
 8001b10:	2307      	movs	r3, #7
 8001b12:	e002      	b.n	8001b1a <HAL_GPIO_Init+0x1d6>
 8001b14:	2301      	movs	r3, #1
 8001b16:	e000      	b.n	8001b1a <HAL_GPIO_Init+0x1d6>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	f002 0203 	and.w	r2, r2, #3
 8001b20:	0092      	lsls	r2, r2, #2
 8001b22:	4093      	lsls	r3, r2
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b2a:	4937      	ldr	r1, [pc, #220]	@ (8001c08 <HAL_GPIO_Init+0x2c4>)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	3302      	adds	r3, #2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b38:	4b36      	ldr	r3, [pc, #216]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b5c:	4a2d      	ldr	r2, [pc, #180]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b62:	4b2c      	ldr	r3, [pc, #176]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b86:	4a23      	ldr	r2, [pc, #140]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b8c:	4b21      	ldr	r3, [pc, #132]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bb0:	4a18      	ldr	r2, [pc, #96]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bb6:	4b17      	ldr	r3, [pc, #92]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bda:	4a0e      	ldr	r2, [pc, #56]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	3301      	adds	r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f47f aeaf 	bne.w	8001954 <HAL_GPIO_Init+0x10>
  }
}
 8001bf6:	bf00      	nop
 8001bf8:	bf00      	nop
 8001bfa:	371c      	adds	r7, #28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40010000 	.word	0x40010000
 8001c0c:	48000400 	.word	0x48000400
 8001c10:	48000800 	.word	0x48000800
 8001c14:	40010400 	.word	0x40010400

08001c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	807b      	strh	r3, [r7, #2]
 8001c24:	4613      	mov	r3, r2
 8001c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c28:	787b      	ldrb	r3, [r7, #1]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c2e:	887a      	ldrh	r2, [r7, #2]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c34:	e002      	b.n	8001c3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c4c:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a04      	ldr	r2, [pc, #16]	@ (8001c64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c56:	6013      	str	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40007000 	.word	0x40007000

08001c68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c6c:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40007000 	.word	0x40007000

08001c84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c92:	d130      	bne.n	8001cf6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c94:	4b23      	ldr	r3, [pc, #140]	@ (8001d24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ca0:	d038      	beq.n	8001d14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca2:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001caa:	4a1e      	ldr	r2, [pc, #120]	@ (8001d24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cb0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2232      	movs	r2, #50	@ 0x32
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc2:	0c9b      	lsrs	r3, r3, #18
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cc8:	e002      	b.n	8001cd0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cd0:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cdc:	d102      	bne.n	8001ce4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1f2      	bne.n	8001cca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cf0:	d110      	bne.n	8001d14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e00f      	b.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d02:	d007      	beq.n	8001d14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d04:	4b07      	ldr	r3, [pc, #28]	@ (8001d24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d0c:	4a05      	ldr	r2, [pc, #20]	@ (8001d24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40007000 	.word	0x40007000
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	431bde83 	.word	0x431bde83

08001d30 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d102      	bne.n	8001d44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f000 bc02 	b.w	8002548 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d44:	4b96      	ldr	r3, [pc, #600]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d4e:	4b94      	ldr	r3, [pc, #592]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 80e4 	beq.w	8001f2e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d007      	beq.n	8001d7c <HAL_RCC_OscConfig+0x4c>
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2b0c      	cmp	r3, #12
 8001d70:	f040 808b 	bne.w	8001e8a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	f040 8087 	bne.w	8001e8a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d7c:	4b88      	ldr	r3, [pc, #544]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_RCC_OscConfig+0x64>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e3d9      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a1a      	ldr	r2, [r3, #32]
 8001d98:	4b81      	ldr	r3, [pc, #516]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d004      	beq.n	8001dae <HAL_RCC_OscConfig+0x7e>
 8001da4:	4b7e      	ldr	r3, [pc, #504]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dac:	e005      	b.n	8001dba <HAL_RCC_OscConfig+0x8a>
 8001dae:	4b7c      	ldr	r3, [pc, #496]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d223      	bcs.n	8001e06 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 fd76 	bl	80028b4 <RCC_SetFlashLatencyFromMSIRange>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e3ba      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dd2:	4b73      	ldr	r3, [pc, #460]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a72      	ldr	r2, [pc, #456]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001dd8:	f043 0308 	orr.w	r3, r3, #8
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	4b70      	ldr	r3, [pc, #448]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	496d      	ldr	r1, [pc, #436]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001df0:	4b6b      	ldr	r3, [pc, #428]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	4968      	ldr	r1, [pc, #416]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	604b      	str	r3, [r1, #4]
 8001e04:	e025      	b.n	8001e52 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e06:	4b66      	ldr	r3, [pc, #408]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a65      	ldr	r2, [pc, #404]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001e0c:	f043 0308 	orr.w	r3, r3, #8
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	4b63      	ldr	r3, [pc, #396]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4960      	ldr	r1, [pc, #384]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e24:	4b5e      	ldr	r3, [pc, #376]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	021b      	lsls	r3, r3, #8
 8001e32:	495b      	ldr	r1, [pc, #364]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 fd36 	bl	80028b4 <RCC_SetFlashLatencyFromMSIRange>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e37a      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e52:	f000 fc81 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8001e56:	4602      	mov	r2, r0
 8001e58:	4b51      	ldr	r3, [pc, #324]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	4950      	ldr	r1, [pc, #320]	@ (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001e64:	5ccb      	ldrb	r3, [r1, r3]
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6e:	4a4e      	ldr	r2, [pc, #312]	@ (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001e70:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e72:	4b4e      	ldr	r3, [pc, #312]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff f9fe 	bl	8001278 <HAL_InitTick>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d052      	beq.n	8001f2c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	e35e      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d032      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e92:	4b43      	ldr	r3, [pc, #268]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a42      	ldr	r2, [pc, #264]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e9e:	f7ff fa3b 	bl	8001318 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ea6:	f7ff fa37 	bl	8001318 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e347      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eb8:	4b39      	ldr	r3, [pc, #228]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ec4:	4b36      	ldr	r3, [pc, #216]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a35      	ldr	r2, [pc, #212]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001eca:	f043 0308 	orr.w	r3, r3, #8
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	4b33      	ldr	r3, [pc, #204]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4930      	ldr	r1, [pc, #192]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	021b      	lsls	r3, r3, #8
 8001ef0:	492b      	ldr	r1, [pc, #172]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]
 8001ef6:	e01a      	b.n	8001f2e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ef8:	4b29      	ldr	r3, [pc, #164]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a28      	ldr	r2, [pc, #160]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f04:	f7ff fa08 	bl	8001318 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f0c:	f7ff fa04 	bl	8001318 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e314      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f1e:	4b20      	ldr	r3, [pc, #128]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x1dc>
 8001f2a:	e000      	b.n	8001f2e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d073      	beq.n	8002022 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_OscConfig+0x21c>
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	d10e      	bne.n	8001f64 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d10b      	bne.n	8001f64 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	4b14      	ldr	r3, [pc, #80]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d063      	beq.n	8002020 <HAL_RCC_OscConfig+0x2f0>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d15f      	bne.n	8002020 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e2f1      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f6c:	d106      	bne.n	8001f7c <HAL_RCC_OscConfig+0x24c>
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e025      	b.n	8001fc8 <HAL_RCC_OscConfig+0x298>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f84:	d114      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x280>
 8001f86:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a05      	ldr	r2, [pc, #20]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001f8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b03      	ldr	r3, [pc, #12]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a02      	ldr	r2, [pc, #8]	@ (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e013      	b.n	8001fc8 <HAL_RCC_OscConfig+0x298>
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	08004480 	.word	0x08004480
 8001fa8:	20000000 	.word	0x20000000
 8001fac:	20000004 	.word	0x20000004
 8001fb0:	4ba0      	ldr	r3, [pc, #640]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a9f      	ldr	r2, [pc, #636]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 8001fb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	4b9d      	ldr	r3, [pc, #628]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a9c      	ldr	r2, [pc, #624]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 8001fc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d013      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7ff f9a2 	bl	8001318 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd8:	f7ff f99e 	bl	8001318 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	@ 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e2ae      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fea:	4b92      	ldr	r3, [pc, #584]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x2a8>
 8001ff6:	e014      	b.n	8002022 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7ff f98e 	bl	8001318 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002000:	f7ff f98a 	bl	8001318 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	@ 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e29a      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002012:	4b88      	ldr	r3, [pc, #544]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x2d0>
 800201e:	e000      	b.n	8002022 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d060      	beq.n	80020f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	2b04      	cmp	r3, #4
 8002032:	d005      	beq.n	8002040 <HAL_RCC_OscConfig+0x310>
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2b0c      	cmp	r3, #12
 8002038:	d119      	bne.n	800206e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d116      	bne.n	800206e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002040:	4b7c      	ldr	r3, [pc, #496]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_OscConfig+0x328>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e277      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002058:	4b76      	ldr	r3, [pc, #472]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	061b      	lsls	r3, r3, #24
 8002066:	4973      	ldr	r1, [pc, #460]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800206c:	e040      	b.n	80020f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d023      	beq.n	80020be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002076:	4b6f      	ldr	r3, [pc, #444]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a6e      	ldr	r2, [pc, #440]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 800207c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002082:	f7ff f949 	bl	8001318 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208a:	f7ff f945 	bl	8001318 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e255      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800209c:	4b65      	ldr	r3, [pc, #404]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a8:	4b62      	ldr	r3, [pc, #392]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	061b      	lsls	r3, r3, #24
 80020b6:	495f      	ldr	r1, [pc, #380]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
 80020bc:	e018      	b.n	80020f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020be:	4b5d      	ldr	r3, [pc, #372]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a5c      	ldr	r2, [pc, #368]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 80020c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ca:	f7ff f925 	bl	8001318 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d2:	f7ff f921 	bl	8001318 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e231      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020e4:	4b53      	ldr	r3, [pc, #332]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f0      	bne.n	80020d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d03c      	beq.n	8002176 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d01c      	beq.n	800213e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002104:	4b4b      	ldr	r3, [pc, #300]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 8002106:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800210a:	4a4a      	ldr	r2, [pc, #296]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002114:	f7ff f900 	bl	8001318 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800211c:	f7ff f8fc 	bl	8001318 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e20c      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800212e:	4b41      	ldr	r3, [pc, #260]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 8002130:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0ef      	beq.n	800211c <HAL_RCC_OscConfig+0x3ec>
 800213c:	e01b      	b.n	8002176 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800213e:	4b3d      	ldr	r3, [pc, #244]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 8002140:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002144:	4a3b      	ldr	r2, [pc, #236]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214e:	f7ff f8e3 	bl	8001318 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002156:	f7ff f8df 	bl	8001318 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e1ef      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002168:	4b32      	ldr	r3, [pc, #200]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 800216a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1ef      	bne.n	8002156 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80a6 	beq.w	80022d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002184:	2300      	movs	r3, #0
 8002186:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002188:	4b2a      	ldr	r3, [pc, #168]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 800218a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10d      	bne.n	80021b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002194:	4b27      	ldr	r3, [pc, #156]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 8002196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002198:	4a26      	ldr	r2, [pc, #152]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 800219a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800219e:	6593      	str	r3, [r2, #88]	@ 0x58
 80021a0:	4b24      	ldr	r3, [pc, #144]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 80021a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ac:	2301      	movs	r3, #1
 80021ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b0:	4b21      	ldr	r3, [pc, #132]	@ (8002238 <HAL_RCC_OscConfig+0x508>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d118      	bne.n	80021ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002238 <HAL_RCC_OscConfig+0x508>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002238 <HAL_RCC_OscConfig+0x508>)
 80021c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021c8:	f7ff f8a6 	bl	8001318 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d0:	f7ff f8a2 	bl	8001318 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e1b2      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e2:	4b15      	ldr	r3, [pc, #84]	@ (8002238 <HAL_RCC_OscConfig+0x508>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d108      	bne.n	8002208 <HAL_RCC_OscConfig+0x4d8>
 80021f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 80021f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002206:	e029      	b.n	800225c <HAL_RCC_OscConfig+0x52c>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b05      	cmp	r3, #5
 800220e:	d115      	bne.n	800223c <HAL_RCC_OscConfig+0x50c>
 8002210:	4b08      	ldr	r3, [pc, #32]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 8002212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002216:	4a07      	ldr	r2, [pc, #28]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 8002218:	f043 0304 	orr.w	r3, r3, #4
 800221c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002220:	4b04      	ldr	r3, [pc, #16]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002226:	4a03      	ldr	r2, [pc, #12]	@ (8002234 <HAL_RCC_OscConfig+0x504>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002230:	e014      	b.n	800225c <HAL_RCC_OscConfig+0x52c>
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	40007000 	.word	0x40007000
 800223c:	4b9a      	ldr	r3, [pc, #616]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 800223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002242:	4a99      	ldr	r2, [pc, #612]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800224c:	4b96      	ldr	r3, [pc, #600]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002252:	4a95      	ldr	r2, [pc, #596]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 8002254:	f023 0304 	bic.w	r3, r3, #4
 8002258:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d016      	beq.n	8002292 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002264:	f7ff f858 	bl	8001318 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800226a:	e00a      	b.n	8002282 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226c:	f7ff f854 	bl	8001318 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e162      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002282:	4b89      	ldr	r3, [pc, #548]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 8002284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0ed      	beq.n	800226c <HAL_RCC_OscConfig+0x53c>
 8002290:	e015      	b.n	80022be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002292:	f7ff f841 	bl	8001318 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002298:	e00a      	b.n	80022b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229a:	f7ff f83d 	bl	8001318 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e14b      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022b0:	4b7d      	ldr	r3, [pc, #500]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1ed      	bne.n	800229a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022be:	7ffb      	ldrb	r3, [r7, #31]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d105      	bne.n	80022d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c4:	4b78      	ldr	r3, [pc, #480]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 80022c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c8:	4a77      	ldr	r2, [pc, #476]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 80022ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0320 	and.w	r3, r3, #32
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d03c      	beq.n	8002356 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01c      	beq.n	800231e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022e4:	4b70      	ldr	r3, [pc, #448]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 80022e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022ea:	4a6f      	ldr	r2, [pc, #444]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f4:	f7ff f810 	bl	8001318 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022fc:	f7ff f80c 	bl	8001318 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e11c      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800230e:	4b66      	ldr	r3, [pc, #408]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 8002310:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0ef      	beq.n	80022fc <HAL_RCC_OscConfig+0x5cc>
 800231c:	e01b      	b.n	8002356 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800231e:	4b62      	ldr	r3, [pc, #392]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 8002320:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002324:	4a60      	ldr	r2, [pc, #384]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232e:	f7fe fff3 	bl	8001318 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002336:	f7fe ffef 	bl	8001318 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e0ff      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002348:	4b57      	ldr	r3, [pc, #348]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 800234a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1ef      	bne.n	8002336 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80f3 	beq.w	8002546 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002364:	2b02      	cmp	r3, #2
 8002366:	f040 80c9 	bne.w	80024fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800236a:	4b4f      	ldr	r3, [pc, #316]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f003 0203 	and.w	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237a:	429a      	cmp	r2, r3
 800237c:	d12c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002388:	3b01      	subs	r3, #1
 800238a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800238c:	429a      	cmp	r2, r3
 800238e:	d123      	bne.n	80023d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800239a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800239c:	429a      	cmp	r2, r3
 800239e:	d11b      	bne.n	80023d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d113      	bne.n	80023d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ba:	085b      	lsrs	r3, r3, #1
 80023bc:	3b01      	subs	r3, #1
 80023be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d109      	bne.n	80023d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	085b      	lsrs	r3, r3, #1
 80023d0:	3b01      	subs	r3, #1
 80023d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d06b      	beq.n	80024b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d062      	beq.n	80024a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023de:	4b32      	ldr	r3, [pc, #200]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e0ac      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023ee:	4b2e      	ldr	r3, [pc, #184]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a2d      	ldr	r2, [pc, #180]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 80023f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023fa:	f7fe ff8d 	bl	8001318 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002402:	f7fe ff89 	bl	8001318 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e099      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002414:	4b24      	ldr	r3, [pc, #144]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f0      	bne.n	8002402 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002420:	4b21      	ldr	r3, [pc, #132]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	4b21      	ldr	r3, [pc, #132]	@ (80024ac <HAL_RCC_OscConfig+0x77c>)
 8002426:	4013      	ands	r3, r2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002430:	3a01      	subs	r2, #1
 8002432:	0112      	lsls	r2, r2, #4
 8002434:	4311      	orrs	r1, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800243a:	0212      	lsls	r2, r2, #8
 800243c:	4311      	orrs	r1, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002442:	0852      	lsrs	r2, r2, #1
 8002444:	3a01      	subs	r2, #1
 8002446:	0552      	lsls	r2, r2, #21
 8002448:	4311      	orrs	r1, r2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800244e:	0852      	lsrs	r2, r2, #1
 8002450:	3a01      	subs	r2, #1
 8002452:	0652      	lsls	r2, r2, #25
 8002454:	4311      	orrs	r1, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800245a:	06d2      	lsls	r2, r2, #27
 800245c:	430a      	orrs	r2, r1
 800245e:	4912      	ldr	r1, [pc, #72]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 8002460:	4313      	orrs	r3, r2
 8002462:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002464:	4b10      	ldr	r3, [pc, #64]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0f      	ldr	r2, [pc, #60]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 800246a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800246e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002470:	4b0d      	ldr	r3, [pc, #52]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4a0c      	ldr	r2, [pc, #48]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 8002476:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800247a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800247c:	f7fe ff4c 	bl	8001318 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002484:	f7fe ff48 	bl	8001318 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e058      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002496:	4b04      	ldr	r3, [pc, #16]	@ (80024a8 <HAL_RCC_OscConfig+0x778>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024a2:	e050      	b.n	8002546 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e04f      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
 80024a8:	40021000 	.word	0x40021000
 80024ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b0:	4b27      	ldr	r3, [pc, #156]	@ (8002550 <HAL_RCC_OscConfig+0x820>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d144      	bne.n	8002546 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024bc:	4b24      	ldr	r3, [pc, #144]	@ (8002550 <HAL_RCC_OscConfig+0x820>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a23      	ldr	r2, [pc, #140]	@ (8002550 <HAL_RCC_OscConfig+0x820>)
 80024c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024c8:	4b21      	ldr	r3, [pc, #132]	@ (8002550 <HAL_RCC_OscConfig+0x820>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a20      	ldr	r2, [pc, #128]	@ (8002550 <HAL_RCC_OscConfig+0x820>)
 80024ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024d4:	f7fe ff20 	bl	8001318 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024dc:	f7fe ff1c 	bl	8001318 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e02c      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ee:	4b18      	ldr	r3, [pc, #96]	@ (8002550 <HAL_RCC_OscConfig+0x820>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x7ac>
 80024fa:	e024      	b.n	8002546 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2b0c      	cmp	r3, #12
 8002500:	d01f      	beq.n	8002542 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002502:	4b13      	ldr	r3, [pc, #76]	@ (8002550 <HAL_RCC_OscConfig+0x820>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a12      	ldr	r2, [pc, #72]	@ (8002550 <HAL_RCC_OscConfig+0x820>)
 8002508:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800250c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250e:	f7fe ff03 	bl	8001318 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002516:	f7fe feff 	bl	8001318 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e00f      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002528:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <HAL_RCC_OscConfig+0x820>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002534:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <HAL_RCC_OscConfig+0x820>)
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	4905      	ldr	r1, [pc, #20]	@ (8002550 <HAL_RCC_OscConfig+0x820>)
 800253a:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <HAL_RCC_OscConfig+0x824>)
 800253c:	4013      	ands	r3, r2
 800253e:	60cb      	str	r3, [r1, #12]
 8002540:	e001      	b.n	8002546 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3720      	adds	r7, #32
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40021000 	.word	0x40021000
 8002554:	feeefffc 	.word	0xfeeefffc

08002558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0e7      	b.n	800273c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800256c:	4b75      	ldr	r3, [pc, #468]	@ (8002744 <HAL_RCC_ClockConfig+0x1ec>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d910      	bls.n	800259c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b72      	ldr	r3, [pc, #456]	@ (8002744 <HAL_RCC_ClockConfig+0x1ec>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 0207 	bic.w	r2, r3, #7
 8002582:	4970      	ldr	r1, [pc, #448]	@ (8002744 <HAL_RCC_ClockConfig+0x1ec>)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b6e      	ldr	r3, [pc, #440]	@ (8002744 <HAL_RCC_ClockConfig+0x1ec>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0cf      	b.n	800273c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d010      	beq.n	80025ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	4b66      	ldr	r3, [pc, #408]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d908      	bls.n	80025ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b8:	4b63      	ldr	r3, [pc, #396]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	4960      	ldr	r1, [pc, #384]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d04c      	beq.n	8002670 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d107      	bne.n	80025ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025de:	4b5a      	ldr	r3, [pc, #360]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d121      	bne.n	800262e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e0a6      	b.n	800273c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025f6:	4b54      	ldr	r3, [pc, #336]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d115      	bne.n	800262e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e09a      	b.n	800273c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800260e:	4b4e      	ldr	r3, [pc, #312]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e08e      	b.n	800273c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800261e:	4b4a      	ldr	r3, [pc, #296]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e086      	b.n	800273c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800262e:	4b46      	ldr	r3, [pc, #280]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f023 0203 	bic.w	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4943      	ldr	r1, [pc, #268]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 800263c:	4313      	orrs	r3, r2
 800263e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002640:	f7fe fe6a 	bl	8001318 <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002646:	e00a      	b.n	800265e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002648:	f7fe fe66 	bl	8001318 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e06e      	b.n	800273c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265e:	4b3a      	ldr	r3, [pc, #232]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 020c 	and.w	r2, r3, #12
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	429a      	cmp	r2, r3
 800266e:	d1eb      	bne.n	8002648 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d010      	beq.n	800269e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	4b31      	ldr	r3, [pc, #196]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002688:	429a      	cmp	r2, r3
 800268a:	d208      	bcs.n	800269e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800268c:	4b2e      	ldr	r3, [pc, #184]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	492b      	ldr	r1, [pc, #172]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800269e:	4b29      	ldr	r3, [pc, #164]	@ (8002744 <HAL_RCC_ClockConfig+0x1ec>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d210      	bcs.n	80026ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ac:	4b25      	ldr	r3, [pc, #148]	@ (8002744 <HAL_RCC_ClockConfig+0x1ec>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f023 0207 	bic.w	r2, r3, #7
 80026b4:	4923      	ldr	r1, [pc, #140]	@ (8002744 <HAL_RCC_ClockConfig+0x1ec>)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026bc:	4b21      	ldr	r3, [pc, #132]	@ (8002744 <HAL_RCC_ClockConfig+0x1ec>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d001      	beq.n	80026ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e036      	b.n	800273c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d008      	beq.n	80026ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026da:	4b1b      	ldr	r3, [pc, #108]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	4918      	ldr	r1, [pc, #96]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d009      	beq.n	800270c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026f8:	4b13      	ldr	r3, [pc, #76]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4910      	ldr	r1, [pc, #64]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 8002708:	4313      	orrs	r3, r2
 800270a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800270c:	f000 f824 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8002710:	4602      	mov	r2, r0
 8002712:	4b0d      	ldr	r3, [pc, #52]	@ (8002748 <HAL_RCC_ClockConfig+0x1f0>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	490b      	ldr	r1, [pc, #44]	@ (800274c <HAL_RCC_ClockConfig+0x1f4>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
 8002728:	4a09      	ldr	r2, [pc, #36]	@ (8002750 <HAL_RCC_ClockConfig+0x1f8>)
 800272a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800272c:	4b09      	ldr	r3, [pc, #36]	@ (8002754 <HAL_RCC_ClockConfig+0x1fc>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe fda1 	bl	8001278 <HAL_InitTick>
 8002736:	4603      	mov	r3, r0
 8002738:	72fb      	strb	r3, [r7, #11]

  return status;
 800273a:	7afb      	ldrb	r3, [r7, #11]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40022000 	.word	0x40022000
 8002748:	40021000 	.word	0x40021000
 800274c:	08004480 	.word	0x08004480
 8002750:	20000000 	.word	0x20000000
 8002754:	20000004 	.word	0x20000004

08002758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	@ 0x24
 800275c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002766:	4b3e      	ldr	r3, [pc, #248]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x108>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002770:	4b3b      	ldr	r3, [pc, #236]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x108>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x34>
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	2b0c      	cmp	r3, #12
 8002784:	d121      	bne.n	80027ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d11e      	bne.n	80027ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800278c:	4b34      	ldr	r3, [pc, #208]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x108>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d107      	bne.n	80027a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002798:	4b31      	ldr	r3, [pc, #196]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x108>)
 800279a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800279e:	0a1b      	lsrs	r3, r3, #8
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	e005      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x108>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10d      	bne.n	80027e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027c8:	e00a      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d102      	bne.n	80027d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027d0:	4b25      	ldr	r3, [pc, #148]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x110>)
 80027d2:	61bb      	str	r3, [r7, #24]
 80027d4:	e004      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027dc:	4b23      	ldr	r3, [pc, #140]	@ (800286c <HAL_RCC_GetSysClockFreq+0x114>)
 80027de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	2b0c      	cmp	r3, #12
 80027e4:	d134      	bne.n	8002850 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d003      	beq.n	80027fe <HAL_RCC_GetSysClockFreq+0xa6>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d003      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0xac>
 80027fc:	e005      	b.n	800280a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x110>)
 8002800:	617b      	str	r3, [r7, #20]
      break;
 8002802:	e005      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002804:	4b19      	ldr	r3, [pc, #100]	@ (800286c <HAL_RCC_GetSysClockFreq+0x114>)
 8002806:	617b      	str	r3, [r7, #20]
      break;
 8002808:	e002      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	617b      	str	r3, [r7, #20]
      break;
 800280e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002810:	4b13      	ldr	r3, [pc, #76]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x108>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	3301      	adds	r3, #1
 800281c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800281e:	4b10      	ldr	r3, [pc, #64]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x108>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	0a1b      	lsrs	r3, r3, #8
 8002824:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	fb03 f202 	mul.w	r2, r3, r2
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	fbb2 f3f3 	udiv	r3, r2, r3
 8002834:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002836:	4b0a      	ldr	r3, [pc, #40]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x108>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	0e5b      	lsrs	r3, r3, #25
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	3301      	adds	r3, #1
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	fbb2 f3f3 	udiv	r3, r2, r3
 800284e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002850:	69bb      	ldr	r3, [r7, #24]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3724      	adds	r7, #36	@ 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	08004498 	.word	0x08004498
 8002868:	00f42400 	.word	0x00f42400
 800286c:	007a1200 	.word	0x007a1200

08002870 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002874:	4b03      	ldr	r3, [pc, #12]	@ (8002884 <HAL_RCC_GetHCLKFreq+0x14>)
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20000000 	.word	0x20000000

08002888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800288c:	f7ff fff0 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	0a1b      	lsrs	r3, r3, #8
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	4904      	ldr	r1, [pc, #16]	@ (80028b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000
 80028b0:	08004490 	.word	0x08004490

080028b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028bc:	2300      	movs	r3, #0
 80028be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028c0:	4b2a      	ldr	r3, [pc, #168]	@ (800296c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028cc:	f7ff f9cc 	bl	8001c68 <HAL_PWREx_GetVoltageRange>
 80028d0:	6178      	str	r0, [r7, #20]
 80028d2:	e014      	b.n	80028fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028d4:	4b25      	ldr	r3, [pc, #148]	@ (800296c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d8:	4a24      	ldr	r2, [pc, #144]	@ (800296c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028de:	6593      	str	r3, [r2, #88]	@ 0x58
 80028e0:	4b22      	ldr	r3, [pc, #136]	@ (800296c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028ec:	f7ff f9bc 	bl	8001c68 <HAL_PWREx_GetVoltageRange>
 80028f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028f2:	4b1e      	ldr	r3, [pc, #120]	@ (800296c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f6:	4a1d      	ldr	r2, [pc, #116]	@ (800296c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002904:	d10b      	bne.n	800291e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b80      	cmp	r3, #128	@ 0x80
 800290a:	d919      	bls.n	8002940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002910:	d902      	bls.n	8002918 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002912:	2302      	movs	r3, #2
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	e013      	b.n	8002940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002918:	2301      	movs	r3, #1
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	e010      	b.n	8002940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b80      	cmp	r3, #128	@ 0x80
 8002922:	d902      	bls.n	800292a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002924:	2303      	movs	r3, #3
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	e00a      	b.n	8002940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b80      	cmp	r3, #128	@ 0x80
 800292e:	d102      	bne.n	8002936 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002930:	2302      	movs	r3, #2
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	e004      	b.n	8002940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b70      	cmp	r3, #112	@ 0x70
 800293a:	d101      	bne.n	8002940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800293c:	2301      	movs	r3, #1
 800293e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002940:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f023 0207 	bic.w	r2, r3, #7
 8002948:	4909      	ldr	r1, [pc, #36]	@ (8002970 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002950:	4b07      	ldr	r3, [pc, #28]	@ (8002970 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	429a      	cmp	r2, r3
 800295c:	d001      	beq.n	8002962 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40021000 	.word	0x40021000
 8002970:	40022000 	.word	0x40022000

08002974 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002978:	4b05      	ldr	r3, [pc, #20]	@ (8002990 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a04      	ldr	r2, [pc, #16]	@ (8002990 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800297e:	f043 0304 	orr.w	r3, r3, #4
 8002982:	6013      	str	r3, [r2, #0]
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000

08002994 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e095      	b.n	8002ad2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d108      	bne.n	80029c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029b6:	d009      	beq.n	80029cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	61da      	str	r2, [r3, #28]
 80029be:	e005      	b.n	80029cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d106      	bne.n	80029ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7fe fb18 	bl	800101c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a0c:	d902      	bls.n	8002a14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	e002      	b.n	8002a1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002a22:	d007      	beq.n	8002a34 <HAL_SPI_Init+0xa0>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a2c:	d002      	beq.n	8002a34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a76:	ea42 0103 	orr.w	r1, r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	0c1b      	lsrs	r3, r3, #16
 8002a90:	f003 0204 	and.w	r2, r3, #4
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002ab0:	ea42 0103 	orr.w	r1, r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b088      	sub	sp, #32
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	603b      	str	r3, [r7, #0]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002aea:	f7fe fc15 	bl	8001318 <HAL_GetTick>
 8002aee:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d001      	beq.n	8002b04 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002b00:	2302      	movs	r3, #2
 8002b02:	e15c      	b.n	8002dbe <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <HAL_SPI_Transmit+0x36>
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e154      	b.n	8002dbe <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_SPI_Transmit+0x48>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e14d      	b.n	8002dbe <HAL_SPI_Transmit+0x2e4>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	88fa      	ldrh	r2, [r7, #6]
 8002b42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	88fa      	ldrh	r2, [r7, #6]
 8002b48:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b74:	d10f      	bne.n	8002b96 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba0:	2b40      	cmp	r3, #64	@ 0x40
 8002ba2:	d007      	beq.n	8002bb4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002bbc:	d952      	bls.n	8002c64 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <HAL_SPI_Transmit+0xf2>
 8002bc6:	8b7b      	ldrh	r3, [r7, #26]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d145      	bne.n	8002c58 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd0:	881a      	ldrh	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bdc:	1c9a      	adds	r2, r3, #2
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bf0:	e032      	b.n	8002c58 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d112      	bne.n	8002c26 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c04:	881a      	ldrh	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c10:	1c9a      	adds	r2, r3, #2
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c24:	e018      	b.n	8002c58 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c26:	f7fe fb77 	bl	8001318 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d803      	bhi.n	8002c3e <HAL_SPI_Transmit+0x164>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c3c:	d102      	bne.n	8002c44 <HAL_SPI_Transmit+0x16a>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d109      	bne.n	8002c58 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e0b2      	b.n	8002dbe <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1c7      	bne.n	8002bf2 <HAL_SPI_Transmit+0x118>
 8002c62:	e083      	b.n	8002d6c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <HAL_SPI_Transmit+0x198>
 8002c6c:	8b7b      	ldrh	r3, [r7, #26]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d177      	bne.n	8002d62 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d912      	bls.n	8002ca2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c80:	881a      	ldrh	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8c:	1c9a      	adds	r2, r3, #2
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b02      	subs	r3, #2
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ca0:	e05f      	b.n	8002d62 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	330c      	adds	r3, #12
 8002cac:	7812      	ldrb	r2, [r2, #0]
 8002cae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002cc8:	e04b      	b.n	8002d62 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d12b      	bne.n	8002d30 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d912      	bls.n	8002d08 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce6:	881a      	ldrh	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf2:	1c9a      	adds	r2, r3, #2
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b02      	subs	r3, #2
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d06:	e02c      	b.n	8002d62 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	330c      	adds	r3, #12
 8002d12:	7812      	ldrb	r2, [r2, #0]
 8002d14:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d2e:	e018      	b.n	8002d62 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d30:	f7fe faf2 	bl	8001318 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d803      	bhi.n	8002d48 <HAL_SPI_Transmit+0x26e>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d46:	d102      	bne.n	8002d4e <HAL_SPI_Transmit+0x274>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e02d      	b.n	8002dbe <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1ae      	bne.n	8002cca <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d6c:	69fa      	ldr	r2, [r7, #28]
 8002d6e:	6839      	ldr	r1, [r7, #0]
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fad9 	bl	8003328 <SPI_EndRxTxTransaction>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10a      	bne.n	8002da0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
  }
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3720      	adds	r7, #32
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d001      	beq.n	8002de6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8002de2:	2302      	movs	r3, #2
 8002de4:	e0d4      	b.n	8002f90 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <HAL_SPI_Transmit_DMA+0x2a>
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e0cc      	b.n	8002f90 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_SPI_Transmit_DMA+0x3c>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e0c5      	b.n	8002f90 <HAL_SPI_Transmit_DMA+0x1c8>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2203      	movs	r2, #3
 8002e10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	88fa      	ldrh	r2, [r7, #6]
 8002e24:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	88fa      	ldrh	r2, [r7, #6]
 8002e2a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e56:	d10f      	bne.n	8002e78 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e7c:	4a46      	ldr	r2, [pc, #280]	@ (8002f98 <HAL_SPI_Transmit_DMA+0x1d0>)
 8002e7e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e84:	4a45      	ldr	r2, [pc, #276]	@ (8002f9c <HAL_SPI_Transmit_DMA+0x1d4>)
 8002e86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8c:	4a44      	ldr	r2, [pc, #272]	@ (8002fa0 <HAL_SPI_Transmit_DMA+0x1d8>)
 8002e8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e94:	2200      	movs	r2, #0
 8002e96:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ea6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002eb0:	d82d      	bhi.n	8002f0e <HAL_SPI_Transmit_DMA+0x146>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ebc:	d127      	bne.n	8002f0e <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10f      	bne.n	8002eec <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002eda:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002eea:	e010      	b.n	8002f0e <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002efa:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	085b      	lsrs	r3, r3, #1
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f16:	4619      	mov	r1, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f24:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002f26:	f7fe fbcd 	bl	80016c4 <HAL_DMA_Start_IT>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00b      	beq.n	8002f48 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f34:	f043 0210 	orr.w	r2, r3, #16
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e023      	b.n	8002f90 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f52:	2b40      	cmp	r3, #64	@ 0x40
 8002f54:	d007      	beq.n	8002f66 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f64:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0220 	orr.w	r2, r2, #32
 8002f7c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0202 	orr.w	r2, r2, #2
 8002f8c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	0800308f 	.word	0x0800308f
 8002f9c:	08002fe9 	.word	0x08002fe9
 8002fa0:	080030ab 	.word	0x080030ab

08002fa4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fda:	b2db      	uxtb	r3, r3
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ff6:	f7fe f98f 	bl	8001318 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0320 	and.w	r3, r3, #32
 8003006:	2b20      	cmp	r3, #32
 8003008:	d03b      	beq.n	8003082 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0220 	bic.w	r2, r2, #32
 8003018:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0202 	bic.w	r2, r2, #2
 8003028:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	2164      	movs	r1, #100	@ 0x64
 800302e:	6978      	ldr	r0, [r7, #20]
 8003030:	f000 f97a 	bl	8003328 <SPI_EndRxTxTransaction>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800303e:	f043 0220 	orr.w	r2, r3, #32
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10a      	bne.n	8003064 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2200      	movs	r2, #0
 8003068:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800307a:	6978      	ldr	r0, [r7, #20]
 800307c:	f7ff ff9c 	bl	8002fb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003080:	e002      	b.n	8003088 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003082:	6978      	ldr	r0, [r7, #20]
 8003084:	f7fd fd48 	bl	8000b18 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f7ff ff81 	bl	8002fa4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0203 	bic.w	r2, r2, #3
 80030c6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030cc:	f043 0210 	orr.w	r2, r3, #16
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f7ff ff6b 	bl	8002fb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030e2:	bf00      	nop
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	4613      	mov	r3, r2
 80030fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030fc:	f7fe f90c 	bl	8001318 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	4413      	add	r3, r2
 800310a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800310c:	f7fe f904 	bl	8001318 <HAL_GetTick>
 8003110:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003112:	4b39      	ldr	r3, [pc, #228]	@ (80031f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	015b      	lsls	r3, r3, #5
 8003118:	0d1b      	lsrs	r3, r3, #20
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	fb02 f303 	mul.w	r3, r2, r3
 8003120:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003122:	e054      	b.n	80031ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800312a:	d050      	beq.n	80031ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800312c:	f7fe f8f4 	bl	8001318 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	69fa      	ldr	r2, [r7, #28]
 8003138:	429a      	cmp	r2, r3
 800313a:	d902      	bls.n	8003142 <SPI_WaitFlagStateUntilTimeout+0x56>
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d13d      	bne.n	80031be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003150:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800315a:	d111      	bne.n	8003180 <SPI_WaitFlagStateUntilTimeout+0x94>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003164:	d004      	beq.n	8003170 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800316e:	d107      	bne.n	8003180 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800317e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003184:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003188:	d10f      	bne.n	80031aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e017      	b.n	80031ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4013      	ands	r3, r2
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	429a      	cmp	r2, r3
 80031dc:	bf0c      	ite	eq
 80031de:	2301      	moveq	r3, #1
 80031e0:	2300      	movne	r3, #0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d19b      	bne.n	8003124 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3720      	adds	r7, #32
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000000 	.word	0x20000000

080031fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	@ 0x28
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800320e:	f7fe f883 	bl	8001318 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	4413      	add	r3, r2
 800321c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800321e:	f7fe f87b 	bl	8001318 <HAL_GetTick>
 8003222:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800322c:	4b3d      	ldr	r3, [pc, #244]	@ (8003324 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	00da      	lsls	r2, r3, #3
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	0d1b      	lsrs	r3, r3, #20
 800323c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800323e:	fb02 f303 	mul.w	r3, r2, r3
 8003242:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003244:	e060      	b.n	8003308 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800324c:	d107      	bne.n	800325e <SPI_WaitFifoStateUntilTimeout+0x62>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d104      	bne.n	800325e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800325c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003264:	d050      	beq.n	8003308 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003266:	f7fe f857 	bl	8001318 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003272:	429a      	cmp	r2, r3
 8003274:	d902      	bls.n	800327c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	2b00      	cmp	r3, #0
 800327a:	d13d      	bne.n	80032f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800328a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003294:	d111      	bne.n	80032ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800329e:	d004      	beq.n	80032aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a8:	d107      	bne.n	80032ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032c2:	d10f      	bne.n	80032e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e010      	b.n	800331a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	3b01      	subs	r3, #1
 8003306:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	4013      	ands	r3, r2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	429a      	cmp	r2, r3
 8003316:	d196      	bne.n	8003246 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3728      	adds	r7, #40	@ 0x28
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20000000 	.word	0x20000000

08003328 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af02      	add	r7, sp, #8
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2200      	movs	r2, #0
 800333c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f7ff ff5b 	bl	80031fc <SPI_WaitFifoStateUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d007      	beq.n	800335c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003350:	f043 0220 	orr.w	r2, r3, #32
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e027      	b.n	80033ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2200      	movs	r2, #0
 8003364:	2180      	movs	r1, #128	@ 0x80
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f7ff fec0 	bl	80030ec <SPI_WaitFlagStateUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003376:	f043 0220 	orr.w	r2, r3, #32
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e014      	b.n	80033ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2200      	movs	r2, #0
 800338a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f7ff ff34 	bl	80031fc <SPI_WaitFifoStateUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d007      	beq.n	80033aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800339e:	f043 0220 	orr.w	r2, r3, #32
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e000      	b.n	80033ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e049      	b.n	800345a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fd fe8e 	bl	80010fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3304      	adds	r3, #4
 80033f0:	4619      	mov	r1, r3
 80033f2:	4610      	mov	r0, r2
 80033f4:	f000 f9ba 	bl	800376c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b01      	cmp	r3, #1
 8003476:	d001      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e03b      	b.n	80034f4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a19      	ldr	r2, [pc, #100]	@ (8003500 <HAL_TIM_Base_Start_IT+0x9c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d009      	beq.n	80034b2 <HAL_TIM_Base_Start_IT+0x4e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034a6:	d004      	beq.n	80034b2 <HAL_TIM_Base_Start_IT+0x4e>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a15      	ldr	r2, [pc, #84]	@ (8003504 <HAL_TIM_Base_Start_IT+0xa0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d115      	bne.n	80034de <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	4b13      	ldr	r3, [pc, #76]	@ (8003508 <HAL_TIM_Base_Start_IT+0xa4>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b06      	cmp	r3, #6
 80034c2:	d015      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x8c>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034ca:	d011      	beq.n	80034f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034dc:	e008      	b.n	80034f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0201 	orr.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e000      	b.n	80034f2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40012c00 	.word	0x40012c00
 8003504:	40014000 	.word	0x40014000
 8003508:	00010007 	.word	0x00010007

0800350c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d020      	beq.n	8003570 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d01b      	beq.n	8003570 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0202 	mvn.w	r2, #2
 8003540:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8e9 	bl	800372e <HAL_TIM_IC_CaptureCallback>
 800355c:	e005      	b.n	800356a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f8db 	bl	800371a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f8ec 	bl	8003742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f003 0304 	and.w	r3, r3, #4
 8003576:	2b00      	cmp	r3, #0
 8003578:	d020      	beq.n	80035bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d01b      	beq.n	80035bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0204 	mvn.w	r2, #4
 800358c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f8c3 	bl	800372e <HAL_TIM_IC_CaptureCallback>
 80035a8:	e005      	b.n	80035b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f8b5 	bl	800371a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f8c6 	bl	8003742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d020      	beq.n	8003608 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f003 0308 	and.w	r3, r3, #8
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01b      	beq.n	8003608 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0208 	mvn.w	r2, #8
 80035d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2204      	movs	r2, #4
 80035de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f89d 	bl	800372e <HAL_TIM_IC_CaptureCallback>
 80035f4:	e005      	b.n	8003602 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f88f 	bl	800371a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f8a0 	bl	8003742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	d020      	beq.n	8003654 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01b      	beq.n	8003654 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0210 	mvn.w	r2, #16
 8003624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2208      	movs	r2, #8
 800362a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f877 	bl	800372e <HAL_TIM_IC_CaptureCallback>
 8003640:	e005      	b.n	800364e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f869 	bl	800371a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f87a 	bl	8003742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00c      	beq.n	8003678 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0201 	mvn.w	r2, #1
 8003670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fd f9e6 	bl	8000a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	d104      	bne.n	800368c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00c      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800369e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f943 	bl	800392c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00c      	beq.n	80036ca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d007      	beq.n	80036ca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80036c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f93b 	bl	8003940 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00c      	beq.n	80036ee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f834 	bl	8003756 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00c      	beq.n	8003712 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d007      	beq.n	8003712 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f06f 0220 	mvn.w	r2, #32
 800370a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f903 	bl	8003918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
	...

0800376c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a30      	ldr	r2, [pc, #192]	@ (8003840 <TIM_Base_SetConfig+0xd4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d003      	beq.n	800378c <TIM_Base_SetConfig+0x20>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800378a:	d108      	bne.n	800379e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a27      	ldr	r2, [pc, #156]	@ (8003840 <TIM_Base_SetConfig+0xd4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00b      	beq.n	80037be <TIM_Base_SetConfig+0x52>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ac:	d007      	beq.n	80037be <TIM_Base_SetConfig+0x52>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a24      	ldr	r2, [pc, #144]	@ (8003844 <TIM_Base_SetConfig+0xd8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d003      	beq.n	80037be <TIM_Base_SetConfig+0x52>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a23      	ldr	r2, [pc, #140]	@ (8003848 <TIM_Base_SetConfig+0xdc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d108      	bne.n	80037d0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a12      	ldr	r2, [pc, #72]	@ (8003840 <TIM_Base_SetConfig+0xd4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d007      	beq.n	800380c <TIM_Base_SetConfig+0xa0>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a11      	ldr	r2, [pc, #68]	@ (8003844 <TIM_Base_SetConfig+0xd8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d003      	beq.n	800380c <TIM_Base_SetConfig+0xa0>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a10      	ldr	r2, [pc, #64]	@ (8003848 <TIM_Base_SetConfig+0xdc>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d103      	bne.n	8003814 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b01      	cmp	r3, #1
 8003824:	d105      	bne.n	8003832 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f023 0201 	bic.w	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	611a      	str	r2, [r3, #16]
  }
}
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40012c00 	.word	0x40012c00
 8003844:	40014000 	.word	0x40014000
 8003848:	40014400 	.word	0x40014400

0800384c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003860:	2302      	movs	r3, #2
 8003862:	e04f      	b.n	8003904 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a21      	ldr	r2, [pc, #132]	@ (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d108      	bne.n	80038a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003894:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a14      	ldr	r2, [pc, #80]	@ (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d009      	beq.n	80038d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038cc:	d004      	beq.n	80038d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a10      	ldr	r2, [pc, #64]	@ (8003914 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d10c      	bne.n	80038f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	40012c00 	.word	0x40012c00
 8003914:	40014000 	.word	0x40014000

08003918 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <memset>:
 8003954:	4402      	add	r2, r0
 8003956:	4603      	mov	r3, r0
 8003958:	4293      	cmp	r3, r2
 800395a:	d100      	bne.n	800395e <memset+0xa>
 800395c:	4770      	bx	lr
 800395e:	f803 1b01 	strb.w	r1, [r3], #1
 8003962:	e7f9      	b.n	8003958 <memset+0x4>

08003964 <__libc_init_array>:
 8003964:	b570      	push	{r4, r5, r6, lr}
 8003966:	4d0d      	ldr	r5, [pc, #52]	@ (800399c <__libc_init_array+0x38>)
 8003968:	4c0d      	ldr	r4, [pc, #52]	@ (80039a0 <__libc_init_array+0x3c>)
 800396a:	1b64      	subs	r4, r4, r5
 800396c:	10a4      	asrs	r4, r4, #2
 800396e:	2600      	movs	r6, #0
 8003970:	42a6      	cmp	r6, r4
 8003972:	d109      	bne.n	8003988 <__libc_init_array+0x24>
 8003974:	4d0b      	ldr	r5, [pc, #44]	@ (80039a4 <__libc_init_array+0x40>)
 8003976:	4c0c      	ldr	r4, [pc, #48]	@ (80039a8 <__libc_init_array+0x44>)
 8003978:	f000 fd76 	bl	8004468 <_init>
 800397c:	1b64      	subs	r4, r4, r5
 800397e:	10a4      	asrs	r4, r4, #2
 8003980:	2600      	movs	r6, #0
 8003982:	42a6      	cmp	r6, r4
 8003984:	d105      	bne.n	8003992 <__libc_init_array+0x2e>
 8003986:	bd70      	pop	{r4, r5, r6, pc}
 8003988:	f855 3b04 	ldr.w	r3, [r5], #4
 800398c:	4798      	blx	r3
 800398e:	3601      	adds	r6, #1
 8003990:	e7ee      	b.n	8003970 <__libc_init_array+0xc>
 8003992:	f855 3b04 	ldr.w	r3, [r5], #4
 8003996:	4798      	blx	r3
 8003998:	3601      	adds	r6, #1
 800399a:	e7f2      	b.n	8003982 <__libc_init_array+0x1e>
 800399c:	08004898 	.word	0x08004898
 80039a0:	08004898 	.word	0x08004898
 80039a4:	08004898 	.word	0x08004898
 80039a8:	0800489c 	.word	0x0800489c

080039ac <sinf>:
 80039ac:	ee10 3a10 	vmov	r3, s0
 80039b0:	b507      	push	{r0, r1, r2, lr}
 80039b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003a30 <sinf+0x84>)
 80039b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d807      	bhi.n	80039cc <sinf+0x20>
 80039bc:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8003a34 <sinf+0x88>
 80039c0:	2000      	movs	r0, #0
 80039c2:	b003      	add	sp, #12
 80039c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80039c8:	f000 b8bc 	b.w	8003b44 <__kernel_sinf>
 80039cc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80039d0:	d304      	bcc.n	80039dc <sinf+0x30>
 80039d2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80039d6:	b003      	add	sp, #12
 80039d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80039dc:	4668      	mov	r0, sp
 80039de:	f000 f8f9 	bl	8003bd4 <__ieee754_rem_pio2f>
 80039e2:	f000 0003 	and.w	r0, r0, #3
 80039e6:	2801      	cmp	r0, #1
 80039e8:	d00a      	beq.n	8003a00 <sinf+0x54>
 80039ea:	2802      	cmp	r0, #2
 80039ec:	d00f      	beq.n	8003a0e <sinf+0x62>
 80039ee:	b9c0      	cbnz	r0, 8003a22 <sinf+0x76>
 80039f0:	eddd 0a01 	vldr	s1, [sp, #4]
 80039f4:	ed9d 0a00 	vldr	s0, [sp]
 80039f8:	2001      	movs	r0, #1
 80039fa:	f000 f8a3 	bl	8003b44 <__kernel_sinf>
 80039fe:	e7ea      	b.n	80039d6 <sinf+0x2a>
 8003a00:	eddd 0a01 	vldr	s1, [sp, #4]
 8003a04:	ed9d 0a00 	vldr	s0, [sp]
 8003a08:	f000 f844 	bl	8003a94 <__kernel_cosf>
 8003a0c:	e7e3      	b.n	80039d6 <sinf+0x2a>
 8003a0e:	eddd 0a01 	vldr	s1, [sp, #4]
 8003a12:	ed9d 0a00 	vldr	s0, [sp]
 8003a16:	2001      	movs	r0, #1
 8003a18:	f000 f894 	bl	8003b44 <__kernel_sinf>
 8003a1c:	eeb1 0a40 	vneg.f32	s0, s0
 8003a20:	e7d9      	b.n	80039d6 <sinf+0x2a>
 8003a22:	eddd 0a01 	vldr	s1, [sp, #4]
 8003a26:	ed9d 0a00 	vldr	s0, [sp]
 8003a2a:	f000 f833 	bl	8003a94 <__kernel_cosf>
 8003a2e:	e7f5      	b.n	8003a1c <sinf+0x70>
 8003a30:	3f490fd8 	.word	0x3f490fd8
 8003a34:	00000000 	.word	0x00000000

08003a38 <lroundf>:
 8003a38:	ee10 1a10 	vmov	r1, s0
 8003a3c:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 8003a40:	2900      	cmp	r1, #0
 8003a42:	f1a3 027f 	sub.w	r2, r3, #127	@ 0x7f
 8003a46:	bfac      	ite	ge
 8003a48:	2001      	movge	r0, #1
 8003a4a:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
 8003a4e:	2a1e      	cmp	r2, #30
 8003a50:	dc1a      	bgt.n	8003a88 <lroundf+0x50>
 8003a52:	2a00      	cmp	r2, #0
 8003a54:	da03      	bge.n	8003a5e <lroundf+0x26>
 8003a56:	3201      	adds	r2, #1
 8003a58:	bf18      	it	ne
 8003a5a:	2000      	movne	r0, #0
 8003a5c:	4770      	bx	lr
 8003a5e:	2a16      	cmp	r2, #22
 8003a60:	bfd8      	it	le
 8003a62:	f44f 0380 	movle.w	r3, #4194304	@ 0x400000
 8003a66:	f3c1 0116 	ubfx	r1, r1, #0, #23
 8003a6a:	bfd8      	it	le
 8003a6c:	4113      	asrle	r3, r2
 8003a6e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8003a72:	bfcd      	iteet	gt
 8003a74:	3b96      	subgt	r3, #150	@ 0x96
 8003a76:	185b      	addle	r3, r3, r1
 8003a78:	f1c2 0217 	rsble	r2, r2, #23
 8003a7c:	fa01 f303 	lslgt.w	r3, r1, r3
 8003a80:	bfd8      	it	le
 8003a82:	40d3      	lsrle	r3, r2
 8003a84:	4358      	muls	r0, r3
 8003a86:	4770      	bx	lr
 8003a88:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003a8c:	ee17 0a90 	vmov	r0, s15
 8003a90:	4770      	bx	lr
	...

08003a94 <__kernel_cosf>:
 8003a94:	ee10 3a10 	vmov	r3, s0
 8003a98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a9c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8003aa0:	eef0 6a40 	vmov.f32	s13, s0
 8003aa4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003aa8:	d204      	bcs.n	8003ab4 <__kernel_cosf+0x20>
 8003aaa:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8003aae:	ee17 2a90 	vmov	r2, s15
 8003ab2:	b342      	cbz	r2, 8003b06 <__kernel_cosf+0x72>
 8003ab4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8003ab8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8003b24 <__kernel_cosf+0x90>
 8003abc:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8003b28 <__kernel_cosf+0x94>
 8003ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8003b2c <__kernel_cosf+0x98>)
 8003ac2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8003b30 <__kernel_cosf+0x9c>
 8003acc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003ad0:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8003b34 <__kernel_cosf+0xa0>
 8003ad4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003ad8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8003b38 <__kernel_cosf+0xa4>
 8003adc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003ae0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8003b3c <__kernel_cosf+0xa8>
 8003ae4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003ae8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8003aec:	ee26 6a07 	vmul.f32	s12, s12, s14
 8003af0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003af4:	eee7 0a06 	vfma.f32	s1, s14, s12
 8003af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afc:	d804      	bhi.n	8003b08 <__kernel_cosf+0x74>
 8003afe:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003b02:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003b06:	4770      	bx	lr
 8003b08:	4a0d      	ldr	r2, [pc, #52]	@ (8003b40 <__kernel_cosf+0xac>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	bf9a      	itte	ls
 8003b0e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8003b12:	ee07 3a10 	vmovls	s14, r3
 8003b16:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8003b1a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003b1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b22:	e7ec      	b.n	8003afe <__kernel_cosf+0x6a>
 8003b24:	ad47d74e 	.word	0xad47d74e
 8003b28:	310f74f6 	.word	0x310f74f6
 8003b2c:	3e999999 	.word	0x3e999999
 8003b30:	b493f27c 	.word	0xb493f27c
 8003b34:	37d00d01 	.word	0x37d00d01
 8003b38:	bab60b61 	.word	0xbab60b61
 8003b3c:	3d2aaaab 	.word	0x3d2aaaab
 8003b40:	3f480000 	.word	0x3f480000

08003b44 <__kernel_sinf>:
 8003b44:	ee10 3a10 	vmov	r3, s0
 8003b48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b4c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8003b50:	d204      	bcs.n	8003b5c <__kernel_sinf+0x18>
 8003b52:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003b56:	ee17 3a90 	vmov	r3, s15
 8003b5a:	b35b      	cbz	r3, 8003bb4 <__kernel_sinf+0x70>
 8003b5c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003b60:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8003bb8 <__kernel_sinf+0x74>
 8003b64:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8003bbc <__kernel_sinf+0x78>
 8003b68:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003b6c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8003bc0 <__kernel_sinf+0x7c>
 8003b70:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003b74:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8003bc4 <__kernel_sinf+0x80>
 8003b78:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003b7c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8003bc8 <__kernel_sinf+0x84>
 8003b80:	ee60 6a07 	vmul.f32	s13, s0, s14
 8003b84:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003b88:	b930      	cbnz	r0, 8003b98 <__kernel_sinf+0x54>
 8003b8a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8003bcc <__kernel_sinf+0x88>
 8003b8e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003b92:	eea6 0a26 	vfma.f32	s0, s12, s13
 8003b96:	4770      	bx	lr
 8003b98:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003b9c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8003ba0:	eee0 7a86 	vfma.f32	s15, s1, s12
 8003ba4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8003ba8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8003bd0 <__kernel_sinf+0x8c>
 8003bac:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8003bb0:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	2f2ec9d3 	.word	0x2f2ec9d3
 8003bbc:	b2d72f34 	.word	0xb2d72f34
 8003bc0:	3638ef1b 	.word	0x3638ef1b
 8003bc4:	b9500d01 	.word	0xb9500d01
 8003bc8:	3c088889 	.word	0x3c088889
 8003bcc:	be2aaaab 	.word	0xbe2aaaab
 8003bd0:	3e2aaaab 	.word	0x3e2aaaab

08003bd4 <__ieee754_rem_pio2f>:
 8003bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bd6:	ee10 6a10 	vmov	r6, s0
 8003bda:	4b88      	ldr	r3, [pc, #544]	@ (8003dfc <__ieee754_rem_pio2f+0x228>)
 8003bdc:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8003be0:	429d      	cmp	r5, r3
 8003be2:	b087      	sub	sp, #28
 8003be4:	4604      	mov	r4, r0
 8003be6:	d805      	bhi.n	8003bf4 <__ieee754_rem_pio2f+0x20>
 8003be8:	2300      	movs	r3, #0
 8003bea:	ed80 0a00 	vstr	s0, [r0]
 8003bee:	6043      	str	r3, [r0, #4]
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	e022      	b.n	8003c3a <__ieee754_rem_pio2f+0x66>
 8003bf4:	4b82      	ldr	r3, [pc, #520]	@ (8003e00 <__ieee754_rem_pio2f+0x22c>)
 8003bf6:	429d      	cmp	r5, r3
 8003bf8:	d83a      	bhi.n	8003c70 <__ieee754_rem_pio2f+0x9c>
 8003bfa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8003bfe:	2e00      	cmp	r6, #0
 8003c00:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8003e04 <__ieee754_rem_pio2f+0x230>
 8003c04:	4a80      	ldr	r2, [pc, #512]	@ (8003e08 <__ieee754_rem_pio2f+0x234>)
 8003c06:	f023 030f 	bic.w	r3, r3, #15
 8003c0a:	dd18      	ble.n	8003c3e <__ieee754_rem_pio2f+0x6a>
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8003c12:	bf09      	itett	eq
 8003c14:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8003e0c <__ieee754_rem_pio2f+0x238>
 8003c18:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8003e10 <__ieee754_rem_pio2f+0x23c>
 8003c1c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8003e14 <__ieee754_rem_pio2f+0x240>
 8003c20:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8003c24:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8003c28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c2c:	ed80 7a00 	vstr	s14, [r0]
 8003c30:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003c34:	edc0 7a01 	vstr	s15, [r0, #4]
 8003c38:	2001      	movs	r0, #1
 8003c3a:	b007      	add	sp, #28
 8003c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	ee70 7a07 	vadd.f32	s15, s0, s14
 8003c44:	bf09      	itett	eq
 8003c46:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8003e0c <__ieee754_rem_pio2f+0x238>
 8003c4a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8003e10 <__ieee754_rem_pio2f+0x23c>
 8003c4e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8003e14 <__ieee754_rem_pio2f+0x240>
 8003c52:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8003c56:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003c5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c5e:	ed80 7a00 	vstr	s14, [r0]
 8003c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c66:	edc0 7a01 	vstr	s15, [r0, #4]
 8003c6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c6e:	e7e4      	b.n	8003c3a <__ieee754_rem_pio2f+0x66>
 8003c70:	4b69      	ldr	r3, [pc, #420]	@ (8003e18 <__ieee754_rem_pio2f+0x244>)
 8003c72:	429d      	cmp	r5, r3
 8003c74:	d873      	bhi.n	8003d5e <__ieee754_rem_pio2f+0x18a>
 8003c76:	f000 f8dd 	bl	8003e34 <fabsf>
 8003c7a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8003e1c <__ieee754_rem_pio2f+0x248>
 8003c7e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003c82:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c8e:	ee17 0a90 	vmov	r0, s15
 8003c92:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8003e04 <__ieee754_rem_pio2f+0x230>
 8003c96:	eea7 0a67 	vfms.f32	s0, s14, s15
 8003c9a:	281f      	cmp	r0, #31
 8003c9c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8003e10 <__ieee754_rem_pio2f+0x23c>
 8003ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ca4:	eeb1 6a47 	vneg.f32	s12, s14
 8003ca8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8003cac:	ee16 1a90 	vmov	r1, s13
 8003cb0:	dc09      	bgt.n	8003cc6 <__ieee754_rem_pio2f+0xf2>
 8003cb2:	4a5b      	ldr	r2, [pc, #364]	@ (8003e20 <__ieee754_rem_pio2f+0x24c>)
 8003cb4:	1e47      	subs	r7, r0, #1
 8003cb6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8003cba:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8003cbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d107      	bne.n	8003cd6 <__ieee754_rem_pio2f+0x102>
 8003cc6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8003cca:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8003cce:	2a08      	cmp	r2, #8
 8003cd0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8003cd4:	dc14      	bgt.n	8003d00 <__ieee754_rem_pio2f+0x12c>
 8003cd6:	6021      	str	r1, [r4, #0]
 8003cd8:	ed94 7a00 	vldr	s14, [r4]
 8003cdc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003ce0:	2e00      	cmp	r6, #0
 8003ce2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003ce6:	ed84 0a01 	vstr	s0, [r4, #4]
 8003cea:	daa6      	bge.n	8003c3a <__ieee754_rem_pio2f+0x66>
 8003cec:	eeb1 7a47 	vneg.f32	s14, s14
 8003cf0:	eeb1 0a40 	vneg.f32	s0, s0
 8003cf4:	ed84 7a00 	vstr	s14, [r4]
 8003cf8:	ed84 0a01 	vstr	s0, [r4, #4]
 8003cfc:	4240      	negs	r0, r0
 8003cfe:	e79c      	b.n	8003c3a <__ieee754_rem_pio2f+0x66>
 8003d00:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8003e0c <__ieee754_rem_pio2f+0x238>
 8003d04:	eef0 6a40 	vmov.f32	s13, s0
 8003d08:	eee6 6a25 	vfma.f32	s13, s12, s11
 8003d0c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8003d10:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003d14:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003e14 <__ieee754_rem_pio2f+0x240>
 8003d18:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8003d1c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8003d20:	ee15 2a90 	vmov	r2, s11
 8003d24:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8003d28:	1a5b      	subs	r3, r3, r1
 8003d2a:	2b19      	cmp	r3, #25
 8003d2c:	dc04      	bgt.n	8003d38 <__ieee754_rem_pio2f+0x164>
 8003d2e:	edc4 5a00 	vstr	s11, [r4]
 8003d32:	eeb0 0a66 	vmov.f32	s0, s13
 8003d36:	e7cf      	b.n	8003cd8 <__ieee754_rem_pio2f+0x104>
 8003d38:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8003e24 <__ieee754_rem_pio2f+0x250>
 8003d3c:	eeb0 0a66 	vmov.f32	s0, s13
 8003d40:	eea6 0a25 	vfma.f32	s0, s12, s11
 8003d44:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8003d48:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8003e28 <__ieee754_rem_pio2f+0x254>
 8003d4c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003d50:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8003d54:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003d58:	ed84 7a00 	vstr	s14, [r4]
 8003d5c:	e7bc      	b.n	8003cd8 <__ieee754_rem_pio2f+0x104>
 8003d5e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8003d62:	d306      	bcc.n	8003d72 <__ieee754_rem_pio2f+0x19e>
 8003d64:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003d68:	edc0 7a01 	vstr	s15, [r0, #4]
 8003d6c:	edc0 7a00 	vstr	s15, [r0]
 8003d70:	e73e      	b.n	8003bf0 <__ieee754_rem_pio2f+0x1c>
 8003d72:	15ea      	asrs	r2, r5, #23
 8003d74:	3a86      	subs	r2, #134	@ 0x86
 8003d76:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8003d7a:	ee07 3a90 	vmov	s15, r3
 8003d7e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003d82:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8003e2c <__ieee754_rem_pio2f+0x258>
 8003d86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d8e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8003d92:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d96:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003d9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003d9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003da2:	ed8d 7a04 	vstr	s14, [sp, #16]
 8003da6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003daa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db2:	edcd 7a05 	vstr	s15, [sp, #20]
 8003db6:	d11e      	bne.n	8003df6 <__ieee754_rem_pio2f+0x222>
 8003db8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc0:	bf0c      	ite	eq
 8003dc2:	2301      	moveq	r3, #1
 8003dc4:	2302      	movne	r3, #2
 8003dc6:	491a      	ldr	r1, [pc, #104]	@ (8003e30 <__ieee754_rem_pio2f+0x25c>)
 8003dc8:	9101      	str	r1, [sp, #4]
 8003dca:	2102      	movs	r1, #2
 8003dcc:	9100      	str	r1, [sp, #0]
 8003dce:	a803      	add	r0, sp, #12
 8003dd0:	4621      	mov	r1, r4
 8003dd2:	f000 f837 	bl	8003e44 <__kernel_rem_pio2f>
 8003dd6:	2e00      	cmp	r6, #0
 8003dd8:	f6bf af2f 	bge.w	8003c3a <__ieee754_rem_pio2f+0x66>
 8003ddc:	edd4 7a00 	vldr	s15, [r4]
 8003de0:	eef1 7a67 	vneg.f32	s15, s15
 8003de4:	edc4 7a00 	vstr	s15, [r4]
 8003de8:	edd4 7a01 	vldr	s15, [r4, #4]
 8003dec:	eef1 7a67 	vneg.f32	s15, s15
 8003df0:	edc4 7a01 	vstr	s15, [r4, #4]
 8003df4:	e782      	b.n	8003cfc <__ieee754_rem_pio2f+0x128>
 8003df6:	2303      	movs	r3, #3
 8003df8:	e7e5      	b.n	8003dc6 <__ieee754_rem_pio2f+0x1f2>
 8003dfa:	bf00      	nop
 8003dfc:	3f490fd8 	.word	0x3f490fd8
 8003e00:	4016cbe3 	.word	0x4016cbe3
 8003e04:	3fc90f80 	.word	0x3fc90f80
 8003e08:	3fc90fd0 	.word	0x3fc90fd0
 8003e0c:	37354400 	.word	0x37354400
 8003e10:	37354443 	.word	0x37354443
 8003e14:	2e85a308 	.word	0x2e85a308
 8003e18:	43490f80 	.word	0x43490f80
 8003e1c:	3f22f984 	.word	0x3f22f984
 8003e20:	080044c8 	.word	0x080044c8
 8003e24:	2e85a300 	.word	0x2e85a300
 8003e28:	248d3132 	.word	0x248d3132
 8003e2c:	43800000 	.word	0x43800000
 8003e30:	08004548 	.word	0x08004548

08003e34 <fabsf>:
 8003e34:	ee10 3a10 	vmov	r3, s0
 8003e38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e3c:	ee00 3a10 	vmov	s0, r3
 8003e40:	4770      	bx	lr
	...

08003e44 <__kernel_rem_pio2f>:
 8003e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e48:	ed2d 8b04 	vpush	{d8-d9}
 8003e4c:	b0d9      	sub	sp, #356	@ 0x164
 8003e4e:	4690      	mov	r8, r2
 8003e50:	9001      	str	r0, [sp, #4]
 8003e52:	4ab6      	ldr	r2, [pc, #728]	@ (800412c <__kernel_rem_pio2f+0x2e8>)
 8003e54:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8003e56:	f118 0f04 	cmn.w	r8, #4
 8003e5a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8003e5e:	460f      	mov	r7, r1
 8003e60:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8003e64:	db26      	blt.n	8003eb4 <__kernel_rem_pio2f+0x70>
 8003e66:	f1b8 0203 	subs.w	r2, r8, #3
 8003e6a:	bf48      	it	mi
 8003e6c:	f108 0204 	addmi.w	r2, r8, #4
 8003e70:	10d2      	asrs	r2, r2, #3
 8003e72:	1c55      	adds	r5, r2, #1
 8003e74:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8003e76:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800413c <__kernel_rem_pio2f+0x2f8>
 8003e7a:	00e8      	lsls	r0, r5, #3
 8003e7c:	eba2 060b 	sub.w	r6, r2, fp
 8003e80:	9002      	str	r0, [sp, #8]
 8003e82:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8003e86:	eb0a 0c0b 	add.w	ip, sl, fp
 8003e8a:	ac1c      	add	r4, sp, #112	@ 0x70
 8003e8c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8003e90:	2000      	movs	r0, #0
 8003e92:	4560      	cmp	r0, ip
 8003e94:	dd10      	ble.n	8003eb8 <__kernel_rem_pio2f+0x74>
 8003e96:	a91c      	add	r1, sp, #112	@ 0x70
 8003e98:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8003e9c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8003ea0:	2600      	movs	r6, #0
 8003ea2:	4556      	cmp	r6, sl
 8003ea4:	dc24      	bgt.n	8003ef0 <__kernel_rem_pio2f+0xac>
 8003ea6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003eaa:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800413c <__kernel_rem_pio2f+0x2f8>
 8003eae:	4684      	mov	ip, r0
 8003eb0:	2400      	movs	r4, #0
 8003eb2:	e016      	b.n	8003ee2 <__kernel_rem_pio2f+0x9e>
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	e7dc      	b.n	8003e72 <__kernel_rem_pio2f+0x2e>
 8003eb8:	42c6      	cmn	r6, r0
 8003eba:	bf5d      	ittte	pl
 8003ebc:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8003ec0:	ee07 1a90 	vmovpl	s15, r1
 8003ec4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8003ec8:	eef0 7a47 	vmovmi.f32	s15, s14
 8003ecc:	ece4 7a01 	vstmia	r4!, {s15}
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	e7de      	b.n	8003e92 <__kernel_rem_pio2f+0x4e>
 8003ed4:	ecfe 6a01 	vldmia	lr!, {s13}
 8003ed8:	ed3c 7a01 	vldmdb	ip!, {s14}
 8003edc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003ee0:	3401      	adds	r4, #1
 8003ee2:	455c      	cmp	r4, fp
 8003ee4:	ddf6      	ble.n	8003ed4 <__kernel_rem_pio2f+0x90>
 8003ee6:	ece9 7a01 	vstmia	r9!, {s15}
 8003eea:	3601      	adds	r6, #1
 8003eec:	3004      	adds	r0, #4
 8003eee:	e7d8      	b.n	8003ea2 <__kernel_rem_pio2f+0x5e>
 8003ef0:	a908      	add	r1, sp, #32
 8003ef2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003ef6:	9104      	str	r1, [sp, #16]
 8003ef8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8003efa:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8004138 <__kernel_rem_pio2f+0x2f4>
 8003efe:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8004134 <__kernel_rem_pio2f+0x2f0>
 8003f02:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003f06:	9203      	str	r2, [sp, #12]
 8003f08:	4654      	mov	r4, sl
 8003f0a:	00a2      	lsls	r2, r4, #2
 8003f0c:	9205      	str	r2, [sp, #20]
 8003f0e:	aa58      	add	r2, sp, #352	@ 0x160
 8003f10:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8003f14:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8003f18:	a944      	add	r1, sp, #272	@ 0x110
 8003f1a:	aa08      	add	r2, sp, #32
 8003f1c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8003f20:	4694      	mov	ip, r2
 8003f22:	4626      	mov	r6, r4
 8003f24:	2e00      	cmp	r6, #0
 8003f26:	dc4c      	bgt.n	8003fc2 <__kernel_rem_pio2f+0x17e>
 8003f28:	4628      	mov	r0, r5
 8003f2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003f2e:	f000 f9f1 	bl	8004314 <scalbnf>
 8003f32:	eeb0 8a40 	vmov.f32	s16, s0
 8003f36:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8003f3a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003f3e:	f000 fa4f 	bl	80043e0 <floorf>
 8003f42:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8003f46:	eea0 8a67 	vfms.f32	s16, s0, s15
 8003f4a:	2d00      	cmp	r5, #0
 8003f4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f50:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8003f54:	ee17 9a90 	vmov	r9, s15
 8003f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f5c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8003f60:	dd41      	ble.n	8003fe6 <__kernel_rem_pio2f+0x1a2>
 8003f62:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8003f66:	a908      	add	r1, sp, #32
 8003f68:	f1c5 0e08 	rsb	lr, r5, #8
 8003f6c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8003f70:	fa46 f00e 	asr.w	r0, r6, lr
 8003f74:	4481      	add	r9, r0
 8003f76:	fa00 f00e 	lsl.w	r0, r0, lr
 8003f7a:	1a36      	subs	r6, r6, r0
 8003f7c:	f1c5 0007 	rsb	r0, r5, #7
 8003f80:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8003f84:	4106      	asrs	r6, r0
 8003f86:	2e00      	cmp	r6, #0
 8003f88:	dd3c      	ble.n	8004004 <__kernel_rem_pio2f+0x1c0>
 8003f8a:	f04f 0e00 	mov.w	lr, #0
 8003f8e:	f109 0901 	add.w	r9, r9, #1
 8003f92:	4670      	mov	r0, lr
 8003f94:	4574      	cmp	r4, lr
 8003f96:	dc68      	bgt.n	800406a <__kernel_rem_pio2f+0x226>
 8003f98:	2d00      	cmp	r5, #0
 8003f9a:	dd03      	ble.n	8003fa4 <__kernel_rem_pio2f+0x160>
 8003f9c:	2d01      	cmp	r5, #1
 8003f9e:	d074      	beq.n	800408a <__kernel_rem_pio2f+0x246>
 8003fa0:	2d02      	cmp	r5, #2
 8003fa2:	d07d      	beq.n	80040a0 <__kernel_rem_pio2f+0x25c>
 8003fa4:	2e02      	cmp	r6, #2
 8003fa6:	d12d      	bne.n	8004004 <__kernel_rem_pio2f+0x1c0>
 8003fa8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003fac:	ee30 8a48 	vsub.f32	s16, s0, s16
 8003fb0:	b340      	cbz	r0, 8004004 <__kernel_rem_pio2f+0x1c0>
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	9306      	str	r3, [sp, #24]
 8003fb6:	f000 f9ad 	bl	8004314 <scalbnf>
 8003fba:	9b06      	ldr	r3, [sp, #24]
 8003fbc:	ee38 8a40 	vsub.f32	s16, s16, s0
 8003fc0:	e020      	b.n	8004004 <__kernel_rem_pio2f+0x1c0>
 8003fc2:	ee60 7a28 	vmul.f32	s15, s0, s17
 8003fc6:	3e01      	subs	r6, #1
 8003fc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fd0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8003fd4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003fd8:	ecac 0a01 	vstmia	ip!, {s0}
 8003fdc:	ed30 0a01 	vldmdb	r0!, {s0}
 8003fe0:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003fe4:	e79e      	b.n	8003f24 <__kernel_rem_pio2f+0xe0>
 8003fe6:	d105      	bne.n	8003ff4 <__kernel_rem_pio2f+0x1b0>
 8003fe8:	1e60      	subs	r0, r4, #1
 8003fea:	a908      	add	r1, sp, #32
 8003fec:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8003ff0:	11f6      	asrs	r6, r6, #7
 8003ff2:	e7c8      	b.n	8003f86 <__kernel_rem_pio2f+0x142>
 8003ff4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003ff8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004000:	da31      	bge.n	8004066 <__kernel_rem_pio2f+0x222>
 8004002:	2600      	movs	r6, #0
 8004004:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400c:	f040 8098 	bne.w	8004140 <__kernel_rem_pio2f+0x2fc>
 8004010:	1e60      	subs	r0, r4, #1
 8004012:	2200      	movs	r2, #0
 8004014:	4550      	cmp	r0, sl
 8004016:	da4b      	bge.n	80040b0 <__kernel_rem_pio2f+0x26c>
 8004018:	2a00      	cmp	r2, #0
 800401a:	d065      	beq.n	80040e8 <__kernel_rem_pio2f+0x2a4>
 800401c:	3c01      	subs	r4, #1
 800401e:	ab08      	add	r3, sp, #32
 8004020:	3d08      	subs	r5, #8
 8004022:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f8      	beq.n	800401c <__kernel_rem_pio2f+0x1d8>
 800402a:	4628      	mov	r0, r5
 800402c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004030:	f000 f970 	bl	8004314 <scalbnf>
 8004034:	1c63      	adds	r3, r4, #1
 8004036:	aa44      	add	r2, sp, #272	@ 0x110
 8004038:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8004138 <__kernel_rem_pio2f+0x2f4>
 800403c:	0099      	lsls	r1, r3, #2
 800403e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004042:	4623      	mov	r3, r4
 8004044:	2b00      	cmp	r3, #0
 8004046:	f280 80a9 	bge.w	800419c <__kernel_rem_pio2f+0x358>
 800404a:	4623      	mov	r3, r4
 800404c:	2b00      	cmp	r3, #0
 800404e:	f2c0 80c7 	blt.w	80041e0 <__kernel_rem_pio2f+0x39c>
 8004052:	aa44      	add	r2, sp, #272	@ 0x110
 8004054:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8004058:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8004130 <__kernel_rem_pio2f+0x2ec>
 800405c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800413c <__kernel_rem_pio2f+0x2f8>
 8004060:	2000      	movs	r0, #0
 8004062:	1ae2      	subs	r2, r4, r3
 8004064:	e0b1      	b.n	80041ca <__kernel_rem_pio2f+0x386>
 8004066:	2602      	movs	r6, #2
 8004068:	e78f      	b.n	8003f8a <__kernel_rem_pio2f+0x146>
 800406a:	f852 1b04 	ldr.w	r1, [r2], #4
 800406e:	b948      	cbnz	r0, 8004084 <__kernel_rem_pio2f+0x240>
 8004070:	b121      	cbz	r1, 800407c <__kernel_rem_pio2f+0x238>
 8004072:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8004076:	f842 1c04 	str.w	r1, [r2, #-4]
 800407a:	2101      	movs	r1, #1
 800407c:	f10e 0e01 	add.w	lr, lr, #1
 8004080:	4608      	mov	r0, r1
 8004082:	e787      	b.n	8003f94 <__kernel_rem_pio2f+0x150>
 8004084:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8004088:	e7f5      	b.n	8004076 <__kernel_rem_pio2f+0x232>
 800408a:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800408e:	aa08      	add	r2, sp, #32
 8004090:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8004094:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004098:	a908      	add	r1, sp, #32
 800409a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800409e:	e781      	b.n	8003fa4 <__kernel_rem_pio2f+0x160>
 80040a0:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80040a4:	aa08      	add	r2, sp, #32
 80040a6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80040aa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80040ae:	e7f3      	b.n	8004098 <__kernel_rem_pio2f+0x254>
 80040b0:	a908      	add	r1, sp, #32
 80040b2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80040b6:	3801      	subs	r0, #1
 80040b8:	430a      	orrs	r2, r1
 80040ba:	e7ab      	b.n	8004014 <__kernel_rem_pio2f+0x1d0>
 80040bc:	3201      	adds	r2, #1
 80040be:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80040c2:	2e00      	cmp	r6, #0
 80040c4:	d0fa      	beq.n	80040bc <__kernel_rem_pio2f+0x278>
 80040c6:	9905      	ldr	r1, [sp, #20]
 80040c8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80040cc:	eb0d 0001 	add.w	r0, sp, r1
 80040d0:	18e6      	adds	r6, r4, r3
 80040d2:	a91c      	add	r1, sp, #112	@ 0x70
 80040d4:	f104 0c01 	add.w	ip, r4, #1
 80040d8:	384c      	subs	r0, #76	@ 0x4c
 80040da:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80040de:	4422      	add	r2, r4
 80040e0:	4562      	cmp	r2, ip
 80040e2:	da04      	bge.n	80040ee <__kernel_rem_pio2f+0x2aa>
 80040e4:	4614      	mov	r4, r2
 80040e6:	e710      	b.n	8003f0a <__kernel_rem_pio2f+0xc6>
 80040e8:	9804      	ldr	r0, [sp, #16]
 80040ea:	2201      	movs	r2, #1
 80040ec:	e7e7      	b.n	80040be <__kernel_rem_pio2f+0x27a>
 80040ee:	9903      	ldr	r1, [sp, #12]
 80040f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80040f4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80040f8:	9105      	str	r1, [sp, #20]
 80040fa:	ee07 1a90 	vmov	s15, r1
 80040fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004102:	2400      	movs	r4, #0
 8004104:	ece6 7a01 	vstmia	r6!, {s15}
 8004108:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800413c <__kernel_rem_pio2f+0x2f8>
 800410c:	46b1      	mov	r9, r6
 800410e:	455c      	cmp	r4, fp
 8004110:	dd04      	ble.n	800411c <__kernel_rem_pio2f+0x2d8>
 8004112:	ece0 7a01 	vstmia	r0!, {s15}
 8004116:	f10c 0c01 	add.w	ip, ip, #1
 800411a:	e7e1      	b.n	80040e0 <__kernel_rem_pio2f+0x29c>
 800411c:	ecfe 6a01 	vldmia	lr!, {s13}
 8004120:	ed39 7a01 	vldmdb	r9!, {s14}
 8004124:	3401      	adds	r4, #1
 8004126:	eee6 7a87 	vfma.f32	s15, s13, s14
 800412a:	e7f0      	b.n	800410e <__kernel_rem_pio2f+0x2ca>
 800412c:	0800488c 	.word	0x0800488c
 8004130:	08004860 	.word	0x08004860
 8004134:	43800000 	.word	0x43800000
 8004138:	3b800000 	.word	0x3b800000
 800413c:	00000000 	.word	0x00000000
 8004140:	9b02      	ldr	r3, [sp, #8]
 8004142:	eeb0 0a48 	vmov.f32	s0, s16
 8004146:	eba3 0008 	sub.w	r0, r3, r8
 800414a:	f000 f8e3 	bl	8004314 <scalbnf>
 800414e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8004134 <__kernel_rem_pio2f+0x2f0>
 8004152:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415a:	db19      	blt.n	8004190 <__kernel_rem_pio2f+0x34c>
 800415c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8004138 <__kernel_rem_pio2f+0x2f4>
 8004160:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004164:	aa08      	add	r2, sp, #32
 8004166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800416a:	3508      	adds	r5, #8
 800416c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004170:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004178:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800417c:	ee10 3a10 	vmov	r3, s0
 8004180:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004184:	ee17 3a90 	vmov	r3, s15
 8004188:	3401      	adds	r4, #1
 800418a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800418e:	e74c      	b.n	800402a <__kernel_rem_pio2f+0x1e6>
 8004190:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004194:	aa08      	add	r2, sp, #32
 8004196:	ee10 3a10 	vmov	r3, s0
 800419a:	e7f6      	b.n	800418a <__kernel_rem_pio2f+0x346>
 800419c:	a808      	add	r0, sp, #32
 800419e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80041a2:	9001      	str	r0, [sp, #4]
 80041a4:	ee07 0a90 	vmov	s15, r0
 80041a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041ac:	3b01      	subs	r3, #1
 80041ae:	ee67 7a80 	vmul.f32	s15, s15, s0
 80041b2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80041b6:	ed62 7a01 	vstmdb	r2!, {s15}
 80041ba:	e743      	b.n	8004044 <__kernel_rem_pio2f+0x200>
 80041bc:	ecfc 6a01 	vldmia	ip!, {s13}
 80041c0:	ecb5 7a01 	vldmia	r5!, {s14}
 80041c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80041c8:	3001      	adds	r0, #1
 80041ca:	4550      	cmp	r0, sl
 80041cc:	dc01      	bgt.n	80041d2 <__kernel_rem_pio2f+0x38e>
 80041ce:	4290      	cmp	r0, r2
 80041d0:	ddf4      	ble.n	80041bc <__kernel_rem_pio2f+0x378>
 80041d2:	a858      	add	r0, sp, #352	@ 0x160
 80041d4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80041d8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80041dc:	3b01      	subs	r3, #1
 80041de:	e735      	b.n	800404c <__kernel_rem_pio2f+0x208>
 80041e0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	dc09      	bgt.n	80041fa <__kernel_rem_pio2f+0x3b6>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	dc27      	bgt.n	800423a <__kernel_rem_pio2f+0x3f6>
 80041ea:	d040      	beq.n	800426e <__kernel_rem_pio2f+0x42a>
 80041ec:	f009 0007 	and.w	r0, r9, #7
 80041f0:	b059      	add	sp, #356	@ 0x164
 80041f2:	ecbd 8b04 	vpop	{d8-d9}
 80041f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041fa:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d1f5      	bne.n	80041ec <__kernel_rem_pio2f+0x3a8>
 8004200:	aa30      	add	r2, sp, #192	@ 0xc0
 8004202:	1f0b      	subs	r3, r1, #4
 8004204:	4413      	add	r3, r2
 8004206:	461a      	mov	r2, r3
 8004208:	4620      	mov	r0, r4
 800420a:	2800      	cmp	r0, #0
 800420c:	dc50      	bgt.n	80042b0 <__kernel_rem_pio2f+0x46c>
 800420e:	4622      	mov	r2, r4
 8004210:	2a01      	cmp	r2, #1
 8004212:	dc5d      	bgt.n	80042d0 <__kernel_rem_pio2f+0x48c>
 8004214:	ab30      	add	r3, sp, #192	@ 0xc0
 8004216:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800413c <__kernel_rem_pio2f+0x2f8>
 800421a:	440b      	add	r3, r1
 800421c:	2c01      	cmp	r4, #1
 800421e:	dc67      	bgt.n	80042f0 <__kernel_rem_pio2f+0x4ac>
 8004220:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8004224:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8004228:	2e00      	cmp	r6, #0
 800422a:	d167      	bne.n	80042fc <__kernel_rem_pio2f+0x4b8>
 800422c:	edc7 6a00 	vstr	s13, [r7]
 8004230:	ed87 7a01 	vstr	s14, [r7, #4]
 8004234:	edc7 7a02 	vstr	s15, [r7, #8]
 8004238:	e7d8      	b.n	80041ec <__kernel_rem_pio2f+0x3a8>
 800423a:	ab30      	add	r3, sp, #192	@ 0xc0
 800423c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800413c <__kernel_rem_pio2f+0x2f8>
 8004240:	440b      	add	r3, r1
 8004242:	4622      	mov	r2, r4
 8004244:	2a00      	cmp	r2, #0
 8004246:	da24      	bge.n	8004292 <__kernel_rem_pio2f+0x44e>
 8004248:	b34e      	cbz	r6, 800429e <__kernel_rem_pio2f+0x45a>
 800424a:	eef1 7a47 	vneg.f32	s15, s14
 800424e:	edc7 7a00 	vstr	s15, [r7]
 8004252:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8004256:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800425a:	aa31      	add	r2, sp, #196	@ 0xc4
 800425c:	2301      	movs	r3, #1
 800425e:	429c      	cmp	r4, r3
 8004260:	da20      	bge.n	80042a4 <__kernel_rem_pio2f+0x460>
 8004262:	b10e      	cbz	r6, 8004268 <__kernel_rem_pio2f+0x424>
 8004264:	eef1 7a67 	vneg.f32	s15, s15
 8004268:	edc7 7a01 	vstr	s15, [r7, #4]
 800426c:	e7be      	b.n	80041ec <__kernel_rem_pio2f+0x3a8>
 800426e:	ab30      	add	r3, sp, #192	@ 0xc0
 8004270:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800413c <__kernel_rem_pio2f+0x2f8>
 8004274:	440b      	add	r3, r1
 8004276:	2c00      	cmp	r4, #0
 8004278:	da05      	bge.n	8004286 <__kernel_rem_pio2f+0x442>
 800427a:	b10e      	cbz	r6, 8004280 <__kernel_rem_pio2f+0x43c>
 800427c:	eef1 7a67 	vneg.f32	s15, s15
 8004280:	edc7 7a00 	vstr	s15, [r7]
 8004284:	e7b2      	b.n	80041ec <__kernel_rem_pio2f+0x3a8>
 8004286:	ed33 7a01 	vldmdb	r3!, {s14}
 800428a:	3c01      	subs	r4, #1
 800428c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004290:	e7f1      	b.n	8004276 <__kernel_rem_pio2f+0x432>
 8004292:	ed73 7a01 	vldmdb	r3!, {s15}
 8004296:	3a01      	subs	r2, #1
 8004298:	ee37 7a27 	vadd.f32	s14, s14, s15
 800429c:	e7d2      	b.n	8004244 <__kernel_rem_pio2f+0x400>
 800429e:	eef0 7a47 	vmov.f32	s15, s14
 80042a2:	e7d4      	b.n	800424e <__kernel_rem_pio2f+0x40a>
 80042a4:	ecb2 7a01 	vldmia	r2!, {s14}
 80042a8:	3301      	adds	r3, #1
 80042aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042ae:	e7d6      	b.n	800425e <__kernel_rem_pio2f+0x41a>
 80042b0:	ed72 7a01 	vldmdb	r2!, {s15}
 80042b4:	edd2 6a01 	vldr	s13, [r2, #4]
 80042b8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80042bc:	3801      	subs	r0, #1
 80042be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042c2:	ed82 7a00 	vstr	s14, [r2]
 80042c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ca:	edc2 7a01 	vstr	s15, [r2, #4]
 80042ce:	e79c      	b.n	800420a <__kernel_rem_pio2f+0x3c6>
 80042d0:	ed73 7a01 	vldmdb	r3!, {s15}
 80042d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80042d8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80042dc:	3a01      	subs	r2, #1
 80042de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042e2:	ed83 7a00 	vstr	s14, [r3]
 80042e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ea:	edc3 7a01 	vstr	s15, [r3, #4]
 80042ee:	e78f      	b.n	8004210 <__kernel_rem_pio2f+0x3cc>
 80042f0:	ed33 7a01 	vldmdb	r3!, {s14}
 80042f4:	3c01      	subs	r4, #1
 80042f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042fa:	e78f      	b.n	800421c <__kernel_rem_pio2f+0x3d8>
 80042fc:	eef1 6a66 	vneg.f32	s13, s13
 8004300:	eeb1 7a47 	vneg.f32	s14, s14
 8004304:	edc7 6a00 	vstr	s13, [r7]
 8004308:	ed87 7a01 	vstr	s14, [r7, #4]
 800430c:	eef1 7a67 	vneg.f32	s15, s15
 8004310:	e790      	b.n	8004234 <__kernel_rem_pio2f+0x3f0>
 8004312:	bf00      	nop

08004314 <scalbnf>:
 8004314:	ee10 3a10 	vmov	r3, s0
 8004318:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800431c:	d02b      	beq.n	8004376 <scalbnf+0x62>
 800431e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8004322:	d302      	bcc.n	800432a <scalbnf+0x16>
 8004324:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004328:	4770      	bx	lr
 800432a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800432e:	d123      	bne.n	8004378 <scalbnf+0x64>
 8004330:	4b24      	ldr	r3, [pc, #144]	@ (80043c4 <scalbnf+0xb0>)
 8004332:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80043c8 <scalbnf+0xb4>
 8004336:	4298      	cmp	r0, r3
 8004338:	ee20 0a27 	vmul.f32	s0, s0, s15
 800433c:	db17      	blt.n	800436e <scalbnf+0x5a>
 800433e:	ee10 3a10 	vmov	r3, s0
 8004342:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004346:	3a19      	subs	r2, #25
 8004348:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800434c:	4288      	cmp	r0, r1
 800434e:	dd15      	ble.n	800437c <scalbnf+0x68>
 8004350:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80043cc <scalbnf+0xb8>
 8004354:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80043d0 <scalbnf+0xbc>
 8004358:	ee10 3a10 	vmov	r3, s0
 800435c:	eeb0 7a67 	vmov.f32	s14, s15
 8004360:	2b00      	cmp	r3, #0
 8004362:	bfb8      	it	lt
 8004364:	eef0 7a66 	vmovlt.f32	s15, s13
 8004368:	ee27 0a87 	vmul.f32	s0, s15, s14
 800436c:	4770      	bx	lr
 800436e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80043d4 <scalbnf+0xc0>
 8004372:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004376:	4770      	bx	lr
 8004378:	0dd2      	lsrs	r2, r2, #23
 800437a:	e7e5      	b.n	8004348 <scalbnf+0x34>
 800437c:	4410      	add	r0, r2
 800437e:	28fe      	cmp	r0, #254	@ 0xfe
 8004380:	dce6      	bgt.n	8004350 <scalbnf+0x3c>
 8004382:	2800      	cmp	r0, #0
 8004384:	dd06      	ble.n	8004394 <scalbnf+0x80>
 8004386:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800438a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800438e:	ee00 3a10 	vmov	s0, r3
 8004392:	4770      	bx	lr
 8004394:	f110 0f16 	cmn.w	r0, #22
 8004398:	da09      	bge.n	80043ae <scalbnf+0x9a>
 800439a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80043d4 <scalbnf+0xc0>
 800439e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80043d8 <scalbnf+0xc4>
 80043a2:	ee10 3a10 	vmov	r3, s0
 80043a6:	eeb0 7a67 	vmov.f32	s14, s15
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	e7d9      	b.n	8004362 <scalbnf+0x4e>
 80043ae:	3019      	adds	r0, #25
 80043b0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80043b4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80043b8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80043dc <scalbnf+0xc8>
 80043bc:	ee07 3a90 	vmov	s15, r3
 80043c0:	e7d7      	b.n	8004372 <scalbnf+0x5e>
 80043c2:	bf00      	nop
 80043c4:	ffff3cb0 	.word	0xffff3cb0
 80043c8:	4c000000 	.word	0x4c000000
 80043cc:	7149f2ca 	.word	0x7149f2ca
 80043d0:	f149f2ca 	.word	0xf149f2ca
 80043d4:	0da24260 	.word	0x0da24260
 80043d8:	8da24260 	.word	0x8da24260
 80043dc:	33000000 	.word	0x33000000

080043e0 <floorf>:
 80043e0:	ee10 3a10 	vmov	r3, s0
 80043e4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80043e8:	3a7f      	subs	r2, #127	@ 0x7f
 80043ea:	2a16      	cmp	r2, #22
 80043ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80043f0:	dc2b      	bgt.n	800444a <floorf+0x6a>
 80043f2:	2a00      	cmp	r2, #0
 80043f4:	da12      	bge.n	800441c <floorf+0x3c>
 80043f6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800445c <floorf+0x7c>
 80043fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80043fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004406:	dd06      	ble.n	8004416 <floorf+0x36>
 8004408:	2b00      	cmp	r3, #0
 800440a:	da24      	bge.n	8004456 <floorf+0x76>
 800440c:	2900      	cmp	r1, #0
 800440e:	4b14      	ldr	r3, [pc, #80]	@ (8004460 <floorf+0x80>)
 8004410:	bf08      	it	eq
 8004412:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8004416:	ee00 3a10 	vmov	s0, r3
 800441a:	4770      	bx	lr
 800441c:	4911      	ldr	r1, [pc, #68]	@ (8004464 <floorf+0x84>)
 800441e:	4111      	asrs	r1, r2
 8004420:	420b      	tst	r3, r1
 8004422:	d0fa      	beq.n	800441a <floorf+0x3a>
 8004424:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800445c <floorf+0x7c>
 8004428:	ee30 0a27 	vadd.f32	s0, s0, s15
 800442c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004434:	ddef      	ble.n	8004416 <floorf+0x36>
 8004436:	2b00      	cmp	r3, #0
 8004438:	bfbe      	ittt	lt
 800443a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800443e:	fa40 f202 	asrlt.w	r2, r0, r2
 8004442:	189b      	addlt	r3, r3, r2
 8004444:	ea23 0301 	bic.w	r3, r3, r1
 8004448:	e7e5      	b.n	8004416 <floorf+0x36>
 800444a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800444e:	d3e4      	bcc.n	800441a <floorf+0x3a>
 8004450:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004454:	4770      	bx	lr
 8004456:	2300      	movs	r3, #0
 8004458:	e7dd      	b.n	8004416 <floorf+0x36>
 800445a:	bf00      	nop
 800445c:	7149f2ca 	.word	0x7149f2ca
 8004460:	bf800000 	.word	0xbf800000
 8004464:	007fffff 	.word	0x007fffff

08004468 <_init>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	bf00      	nop
 800446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446e:	bc08      	pop	{r3}
 8004470:	469e      	mov	lr, r3
 8004472:	4770      	bx	lr

08004474 <_fini>:
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	bf00      	nop
 8004478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447a:	bc08      	pop	{r3}
 800447c:	469e      	mov	lr, r3
 800447e:	4770      	bx	lr
